   1	
   2	
   3	
   4	MANET                                                           Pr. Mase
   5	Internet-Draft                                                  C. Adjih
   6	Expires: November 27, 2005                 Information and Communication
   7	                                        Network Lab., Niigata University
   8	                                                            May 26, 2005
   9	
  10	
  11	                   No Overhead Autoconfiguration OLSR
  12	                  draft-mase-manet-autoconf-noaolsr-00
  13	
  14	Status of this Memo
  15	
  16	   By submitting this Internet-Draft, each author represents that any
  17	   applicable patent or other IPR claims of which he or she is aware
  18	   have been or will be disclosed, and any of which he or she becomes
  19	   aware will be disclosed, in accordance with Section 6 of BCP 79.
  20	
  21	   Internet-Drafts are working documents of the Internet Engineering
  22	   Task Force (IETF), its areas, and its working groups.  Note that
  23	   other groups may also distribute working documents as Internet-
  24	   Drafts.
  25	
  26	   Internet-Drafts are draft documents valid for a maximum of six months
  27	   and may be updated, replaced, or obsoleted by other documents at any
  28	   time.  It is inappropriate to use Internet-Drafts as reference
  29	   material or to cite them other than as "work in progress."
  30	
  31	   The list of current Internet-Drafts can be accessed at
  32	   http://www.ietf.org/ietf/1id-abstracts.txt.
  33	
  34	   The list of Internet-Draft Shadow Directories can be accessed at
  35	   http://www.ietf.org/shadow.html.
  36	
  37	   This Internet-Draft will expire on November 27, 2005.
  38	
  39	Copyright Notice
  40	
  41	   Copyright (C) The Internet Society (2005).
  42	
  43	Abstract
  44	
  45	   This document specifies one method for autoconfiguration for the
  46	   Optimized Link State Routing (OLSR) protocol for ad hoc networks.
  47	   OLSR is a routing protocol for mobile ad hoc networks, designed for
  48	   use in multi-hop wireless ad hoc networks ; and as such it specifies
  49	   how individual nodes can construct routes to each other.  To achieve
  50	   this, it relies on preliminary assignment of unique IP addresses to
  51	   OLSR interfaces ; hence the task of assigning addresses to
  52	
  53	
  54	
  55	Mase & Adjih            Expires November 27, 2005               [Page 1]
  56	
  57	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
  58	
  59	
  60	   interfaces, and checking their uniqueness is defined externally.
  61	   This document proposes a complementary method, called "No Overhead
  62	   Autoconfiguration for OLSR" (NOA-OLSR), to perform this task of
  63	   ensuring uniqueness (Duplicate Address Detection, DAD) of addresses
  64	   which have been selected.  This method consists of modifications in
  65	   the OLSR specification.
  66	
  67	Table of Contents
  68	
  69	   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  5
  70	   2.  Autoconfiguration Method Overview  . . . . . . . . . . . . . .  6
  71	   3.  Terminology  . . . . . . . . . . . . . . . . . . . . . . . . .  9
  72	   4.  Autoconfiguration Algorithms . . . . . . . . . . . . . . . . . 11
  73	     4.1   Overview . . . . . . . . . . . . . . . . . . . . . . . . . 11
  74	     4.2   Address Selection  . . . . . . . . . . . . . . . . . . . . 11
  75	     4.3   Duplicate Address Detection  . . . . . . . . . . . . . . . 11
  76	       4.3.1   Overview . . . . . . . . . . . . . . . . . . . . . . . 11
  77	       4.3.2   Notation . . . . . . . . . . . . . . . . . . . . . . . 12
  78	       4.3.3   Neighbor Duplicate Address Detection . . . . . . . . . 13
  79	         4.3.3.1   Rule R1  . . . . . . . . . . . . . . . . . . . . . 13
  80	       4.3.4   Two-hop duplicate address detection  . . . . . . . . . 14
  81	         4.3.4.1   Rule R2  . . . . . . . . . . . . . . . . . . . . . 14
  82	         4.3.4.2   Rule R3  . . . . . . . . . . . . . . . . . . . . . 14
  83	       4.3.5   Multihop duplicate address detection . . . . . . . . . 15
  84	         4.3.5.1   Multihop DAD with two TC generators  . . . . . . . 16
  85	         4.3.5.2   Multihop DAD with two non-generators . . . . . . . 17
  86	         4.3.5.3   Multihop DAD with one TC Generator and one
  87	                   Non-Generator  . . . . . . . . . . . . . . . . . . 21
  88	         4.3.5.4   Three-hop DAD, Specific Case . . . . . . . . . . . 24
  89	     4.4   Sequence Number Consistency  . . . . . . . . . . . . . . . 25
  90	       4.4.1   Minimum Wrap-Around Limit  . . . . . . . . . . . . . . 25
  91	       4.4.2   HELLO Sequence Number Consistency  . . . . . . . . . . 25
  92	       4.4.3   TC Sequence Number Consistency . . . . . . . . . . . . 26
  93	     4.5   Autoconfiguration State  . . . . . . . . . . . . . . . . . 27
  94	       4.5.1   Introduction . . . . . . . . . . . . . . . . . . . . . 27
  95	       4.5.2   Functionning . . . . . . . . . . . . . . . . . . . . . 27
  96	     4.6   Node Familiarity . . . . . . . . . . . . . . . . . . . . . 29
  97	   5.  Autoconfiguration Specifications . . . . . . . . . . . . . . . 30
  98	     5.1   Overview . . . . . . . . . . . . . . . . . . . . . . . . . 30
  99	     5.2   Information Repository . . . . . . . . . . . . . . . . . . 30
 100	       5.2.1   Autoconfiguration State  . . . . . . . . . . . . . . . 30
 101	       5.2.2   State Information Base . . . . . . . . . . . . . . . . 30
 102	       5.2.3   Duplicate Set  . . . . . . . . . . . . . . . . . . . . 31
 103	         5.2.3.1   Message Content Identifier . . . . . . . . . . . . 31
 104	       5.2.4   Set and Unset Fields . . . . . . . . . . . . . . . . . 32
 105	     5.3   Address Selection and Address Change . . . . . . . . . . . 32
 106	       5.3.1   Address Selection  . . . . . . . . . . . . . . . . . . 32
 107	       5.3.2   Address Change . . . . . . . . . . . . . . . . . . . . 33
 108	
 109	
 110	
 111	Mase & Adjih            Expires November 27, 2005               [Page 2]
 112	
 113	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 114	
 115	
 116	     5.4   State Set Update . . . . . . . . . . . . . . . . . . . . . 34
 117	       5.4.1   Populating the State Set . . . . . . . . . . . . . . . 34
 118	       5.4.2   State Tuple Update . . . . . . . . . . . . . . . . . . 35
 119	       5.4.3   Associated State Tuple Retrieval . . . . . . . . . . . 36
 120	       5.4.4   State Tuple: HELLO information update  . . . . . . . . 36
 121	       5.4.5   State Tuple: TC information update . . . . . . . . . . 37
 122	       5.4.6   State Tuple: MPR information update  . . . . . . . . . 37
 123	       5.4.7   Familiarity  . . . . . . . . . . . . . . . . . . . . . 37
 124	     5.5   Changes in Message Processing  . . . . . . . . . . . . . . 38
 125	       5.5.1   Overview . . . . . . . . . . . . . . . . . . . . . . . 38
 126	       5.5.2   Packet Processing and Message Flooding . . . . . . . . 38
 127	         5.5.2.1   Special Retransmission . . . . . . . . . . . . . . 39
 128	         5.5.2.2   Special Duplicate Tuple Creation . . . . . . . . . 39
 129	       5.5.3   Autoconfiguration Message Pre-Processing . . . . . . . 40
 130	         5.5.3.1   Hello Message Pre-Processing . . . . . . . . . . . 40
 131	         5.5.3.2   TC Message Pre-Processing  . . . . . . . . . . . . 41
 132	       5.5.4   Autoconfiguration Message Post-Processing  . . . . . . 43
 133	     5.6   Changes in OLSR Message Processing . . . . . . . . . . . . 43
 134	       5.6.1   Changes in HELLO Message Format  . . . . . . . . . . . 43
 135	       5.6.2   Changes in HELLO Message Processing  . . . . . . . . . 44
 136	         5.6.2.1   State Set Update from HELLO  . . . . . . . . . . . 46
 137	       5.6.3   Changes in HELLO Message Generation  . . . . . . . . . 47
 138	       5.6.4   Changes in TC Message Format . . . . . . . . . . . . . 48
 139	       5.6.5   Changes in TC Message Processing . . . . . . . . . . . 48
 140	         5.6.5.1   State Set Update from TC . . . . . . . . . . . . . 49
 141	         5.6.5.2   Conflict detection based on TC message content . . 49
 142	         5.6.5.3   Dismissed TC messages  . . . . . . . . . . . . . . 50
 143	         5.6.5.4   Dismissed addresses in TC messages . . . . . . . . 50
 144	       5.6.6   Changes in TC Message Generation . . . . . . . . . . . 51
 145	       5.6.7   Message Type for HELLO and TC Messages . . . . . . . . 53
 146	     5.7   Changes in MPR Computation . . . . . . . . . . . . . . . . 53
 147	     5.8   Changes in Routing Table Calculation . . . . . . . . . . . 54
 148	   6.  Proposed Values for Constants  . . . . . . . . . . . . . . . . 55
 149	   7.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 56
 150	   8.  Limitations and interoperability considerations  . . . . . . . 57
 151	     8.1   Limitations  . . . . . . . . . . . . . . . . . . . . . . . 57
 152	     8.2   Interoperability with Standard OLSR  . . . . . . . . . . . 58
 153	       8.2.1   Considerations for Interoperability with Standard
 154	               OLSR . . . . . . . . . . . . . . . . . . . . . . . . . 58
 155	       8.2.2   Considerations for Isolation from Standard OLSR
 156	               Nodes  . . . . . . . . . . . . . . . . . . . . . . . . 59
 157	   9.  Requirements notation  . . . . . . . . . . . . . . . . . . . . 61
 158	   10.   Security Considerations  . . . . . . . . . . . . . . . . . . 62
 159	   11.   Acknowledgements . . . . . . . . . . . . . . . . . . . . . . 63
 160	   12.   References . . . . . . . . . . . . . . . . . . . . . . . . . 64
 161	     12.1  Normative References . . . . . . . . . . . . . . . . . . . 64
 162	     12.2  Informative References . . . . . . . . . . . . . . . . . . 64
 163	       Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . 65
 164	
 165	
 166	
 167	Mase & Adjih            Expires November 27, 2005               [Page 3]
 168	
 169	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 170	
 171	
 172	       Index  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
 173	       Intellectual Property and Copyright Statements . . . . . . . . 67
 174	
 175	
 176	
 177	
 178	
 179	
 180	
 181	
 182	
 183	
 184	
 185	
 186	
 187	
 188	
 189	
 190	
 191	
 192	
 193	
 194	
 195	
 196	
 197	
 198	
 199	
 200	
 201	
 202	
 203	
 204	
 205	
 206	
 207	
 208	
 209	
 210	
 211	
 212	
 213	
 214	
 215	
 216	
 217	
 218	
 219	
 220	
 221	
 222	
 223	Mase & Adjih            Expires November 27, 2005               [Page 4]
 224	
 225	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 226	
 227	
 228	1.  Introduction
 229	
 230	   A mobile ad hoc network is a collection of nodes, which collaborate
 231	   to each other without depending on centralized control for enabling
 232	   wireless communication among nodes.  When two nodes are within direct
 233	   transmission range, they communicate directly (one hop wireless
 234	   communication) ; and otherwise they communicate using other nodes as
 235	   intermediary nodes (multihop wireless communication), where the
 236	   intermediary nodes act as routers for forwarding IP datagrams.
 237	   Accordingly, routing is a key problem for mobile ad hoc networks and
 238	   many routing protocols have been proposed.  In IETF, in the MANET
 239	   working group, two proactive routing protocols, OLSR [3] and TBRPF
 240	   [4], and two reactive routing protocols, AODV [5] and DSR [6] are or
 241	   will progress to experimental RFC status.  However these routing
 242	   protocols assume that each node has been assigned an unique IP
 243	   address on each of its network interfaces.  IP address
 244	   autoconfiguration is therefore an important pratical issue and
 245	   accordingly, many autoconfiguration methods for various types of
 246	   MANET networks have been proposed.
 247	
 248	   Many conventional methods are organized independently from routing
 249	   protocols so that they can be used for any MANET regardless of the
 250	   routing protocols.  Some other methods are intended to work jointly
 251	   with the routing protocols to improve efficiency of IP address
 252	   autoconfiguration and duplicated address detection.  For example,
 253	   information about IP addresses in use can be collected with support
 254	   of the routing protocol and can be used in selecting a new free
 255	   addresses for a node seeking address allocation.  Unfortunately, all
 256	   of these proposed methods are rather expensive as they require
 257	   significant control message overhead for either avoiding or resolving
 258	   address conflicts.
 259	
 260	   We propose a novel IP address autoconfiguration method for MANET with
 261	   proactive routing for OLSR.  Our method is an duplicate address
 262	   detection without overhead based on properties of proactive link
 263	   state routing protocols.  The algorithmic and research related aspect
 264	   can be find in the joint publication [9].
 265	
 266	
 267	
 268	
 269	
 270	
 271	
 272	
 273	
 274	
 275	
 276	
 277	
 278	
 279	Mase & Adjih            Expires November 27, 2005               [Page 5]
 280	
 281	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 282	
 283	
 284	2.  Autoconfiguration Method Overview
 285	
 286	   In this section, an overview of the autoconfiguration method is
 287	   given, followed by a description of the structure of the document.
 288	
 289	   The autoconfiguration algorithm detailed in this document applies to
 290	   the OLSR protocol, and changes its operation.  The node is assumed to
 291	   implement the OLSR protocol ([3], thereafter denoted "standard
 292	   OLSR"), complemented by the modifications specified here
 293	   (thenceforth, "NOA-OLSR").  The node is also assumed to operate in a
 294	   OLSR MANET environment in which the limitations and restrictions
 295	   enumerated in Section 8 are respected.
 296	
 297	   Under these assumptions, an OLSR node running NOA-OLSR will proceed
 298	   as follows.  An address is initially selected for its OLSR interface
 299	   (manually, or using the autoconfiguration methods suggested in this
 300	   document).  Then, the node runs the OLSR protocol using this address,
 301	   while at the same time constantly checking that it is not conflicting
 302	   with the address of another node in the network (using the detection
 303	   algorithm of this document).  Finally, it doesn't run fully OLSR
 304	   protocol initially, because it might be entering in a network where
 305	   its address could be already used by another node, and it would
 306	   possibly break routes of nodes which are already running.  Instead,
 307	   the node goes through several states, in the last of which, only, the
 308	   node will ultimately run the full OLSR protocol.  Similarily, in
 309	   order to avoid routing table contamination, the other nodes avoid
 310	   relying on this node initially, and will rely on it for routing and
 311	   forwarding messages, when it has reached proper states.
 312	
 313	   To sum up, the autoconfiguration of an OLSR node includes in three
 314	   parts:
 315	
 316	   o  Address selection
 317	
 318	   o  Ongoing duplicate address detection
 319	
 320	   o  Gradual entry in the OLSR network and routing table contamination
 321	      avoidance
 322	
 323	   Considering the address selection, it is actually a peripherical
 324	   issue of the protocol described in this document, because it is
 325	   fairly independent of it.  Hence an overview of address selection is
 326	   provided, along with guidelines, and pointers to relevant references.
 327	
 328	   The ongoing duplicate address detection is the main addition to the
 329	   OLSR protocol, detailed in section Section 4.3 is , checking for
 330	   inconsistencies in the routing protocol messages to diagnose
 331	   duplicate address detection, using variants of the ideas pioneered by
 332	
 333	
 334	
 335	Mase & Adjih            Expires November 27, 2005               [Page 6]
 336	
 337	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 338	
 339	
 340	   [8]:
 341	
 342	   o  The first kind of inconsistency is based on information included
 343	      in OLSR messages (such as HELLO messages and TC messages): many
 344	      cases of duplicate address in one MANET network result into
 345	      inconsistent information being received ; topology information,
 346	      for instance.
 347	
 348	   o  The second kind of inconsistency is based on sequence numbers:
 349	      when two nodes, which selected the same IP address, are present in
 350	      a network, they would send control messages that will be
 351	      inconsistent.
 352	
 353	   Finally the protocol introduces a state for each OLSR node, the
 354	   "autoconfiguration state".  As mentioned, it allows one OLSR node
 355	   with a newly selected address to enter gradually in running OLSR
 356	   network, by sending messages which will be used by more and more
 357	   nodes.  At the same time, it also prevents routing table calculation
 358	   contamination by ensuring that routes go through nodes which have
 359	   been present in the network long enough for the duplicate address
 360	   detection to have been performed.  The description of the
 361	   autoconfiguration state is given in section Section 4.5.
 362	
 363	   The description of the three parts constitutes the major part of this
 364	   document.  However, they include both algorithm aspects (such as how
 365	   and why some DAD rule is used), and detailed specifications (such as
 366	   the information bases used to implement the protocol).  The choice
 367	   was made to divide the document in two parts: first the algorithmic
 368	   part which describe the ideas used, then the detailed specifications.
 369	   Including some additional sections, the remaining of this document is
 370	   organized as follows:
 371	
 372	   o  Section 3 collects specific terminology used
 373	
 374	   o  Section 4 provides the high-level, algorithmic, part of this
 375	      document.  It includes:
 376	
 377	      *  Address selection.
 378	
 379	      *  Ongoing duplicate address detection.
 380	
 381	      *  Principles behind checking sequence number consistency of
 382	         messages.
 383	
 384	      *  Gradual entry in the OLSR network and routing table
 385	         contamination avoidance.
 386	
 387	
 388	
 389	
 390	
 391	Mase & Adjih            Expires November 27, 2005               [Page 7]
 392	
 393	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 394	
 395	
 396	   o  Section 5 provides the specification of NOA-OLSR.  It includes:
 397	
 398	      *  Description of the additions and changes to the information
 399	         repository of OLSR.
 400	
 401	      *  Population of (new) state set.
 402	
 403	      *  Constraints of address selection.
 404	
 405	      *  Changes in packet processing, in OLSR message processing and
 406	         OLSR message generation.
 407	
 408	      *  Changes in MPR computation and routing table calculation.
 409	
 410	
 411	
 412	
 413	
 414	
 415	
 416	
 417	
 418	
 419	
 420	
 421	
 422	
 423	
 424	
 425	
 426	
 427	
 428	
 429	
 430	
 431	
 432	
 433	
 434	
 435	
 436	
 437	
 438	
 439	
 440	
 441	
 442	
 443	
 444	
 445	
 446	
 447	Mase & Adjih            Expires November 27, 2005               [Page 8]
 448	
 449	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 450	
 451	
 452	3.  Terminology
 453	
 454	   This section provides definition for terms that have a specific
 455	   meaning to the protocol specified in this document and that are used
 456	   throughout the text.
 457	
 458	   Address Conflict: When two nodes in the same MANET network share the
 459	      same address, the situation is described as an "Address Conflict".
 460	      The nodes involved are "conflicting nodes" and their shared
 461	      address is called "conflicting address".  Conflicting nodes may
 462	      each send one message with the same sequence number and same
 463	      message type: such messages are denoted "conflicting messages".
 464	
 465	   Autoconfiguration State: The current autoconfiguration state of the
 466	      node, one of HELLO, TOPOLOGY, and NORMAL, which indicates what
 467	      messages it should (or should not) generate and processing it
 468	      should (or should not) do (see Section 4.5).
 469	
 470	   Busy Address: An address which is being used by some node in the
 471	      network (see Section 4.2).
 472	
 473	   Duplicate Address Detection (DAD): Duplicate address detection is the
 474	      action of detecting address conflict, the situation where some
 475	      nodes are using the same address in the same MANET network.
 476	
 477	   Duplicate Address Detection Rule (DAD Rule): A duplicate address
 478	      detection rule is one rule of this document, which used to detect
 479	      the existence of address conflict (see Section 4.3).
 480	
 481	   Familiar Address (Node): An address is familiar for a node, if the
 482	      node has seen it in an OLSR message, for a sufficiently long
 483	      period of time (see Section 4.6 and Section 5.4.7).  A node is
 484	      familiar for another node if it has a familiar address for this
 485	      other node.  An address or a node which is not familiar is said
 486	      "unfamiliar".
 487	
 488	   Message Content Identifier: A message content identifier is computed
 489	      internally by the node to differentiate between the content of
 490	      different messages, independently of the message header (see
 491	      Section 5.2.3.1).
 492	
 493	   Message Content Identifier Generation Method: The message content
 494	      identifier generation method, is the method that one node
 495	      implements to compute a message content identifier from the
 496	      content of a message (see Section 5.2.3.1).
 497	
 498	
 499	
 500	
 501	
 502	
 503	Mase & Adjih            Expires November 27, 2005               [Page 9]
 504	
 505	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 506	
 507	
 508	   NOA-OLSR: "NOA-OLSR" is the protocol specified by this document.  It
 509	      is the standard OLSR protocol [3] with the additions and changes
 510	      specified in this document.
 511	
 512	   Routing Table Contamination Avoidance: Routing table contamination
 513	      avoidance is the idea of preserving the routing table from
 514	      incorrect information due to address conflict.  This is achieved
 515	      by using the autoconfiguration state (see Section 4.5).
 516	
 517	   Sequence Number Consistency: All OLSR messages have a sequence
 518	      number.  One trademark of duplicate addresses, is sequence numbers
 519	      of different messages, which could not result from a correct
 520	      implementation of the OLSR protocol (such as decrease in sequence
 521	      numbers, etc.).  The properties of sequence numbers which would
 522	      result from the normal OLSR protocol implementation are termed
 523	      "Sequence number consistency" (see Section 4.4).
 524	
 525	   Standard OLSR: The terms "standard OLSR protocol" refer to the OLSR
 526	      protocol specified in [3].  The term "standard" is meant to
 527	      differentiate with the "non-standard" OLSR protocol proposed in
 528	      this document (thereafter, "NOA-OLSR").  It is not meant to
 529	      express its normative status within IETF or standardization
 530	      organizations.
 531	
 532	   TC Generator: A node which generates TC messages (as originator).
 533	
 534	
 535	
 536	
 537	
 538	
 539	
 540	
 541	
 542	
 543	
 544	
 545	
 546	
 547	
 548	
 549	
 550	
 551	
 552	
 553	
 554	
 555	
 556	
 557	
 558	
 559	Mase & Adjih            Expires November 27, 2005              [Page 10]
 560	
 561	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 562	
 563	
 564	4.  Autoconfiguration Algorithms
 565	
 566	4.1  Overview
 567	
 568	   This section provides a high-level view of the method used for
 569	   autoconfiguration of the node: address selection, duplicate address
 570	   detection based on rules, principles for sequence number consistency,
 571	   use of the autoconfiguration state.  The detailed specifications of
 572	   the method are in Section 5.
 573	
 574	4.2  Address Selection
 575	
 576	   When a node is present in a MANET, it can monitor the protocol
 577	   message exchanges and collect information regarding the addresses in
 578	   use, the "busy address list".  It can then selects its own address
 579	   from the pool of free addresses by avoiding the busy address list.
 580	   With OLSR, it is possible for each node to obtain busy address
 581	   information through routing control messages received from other
 582	   nodes (such information is available as part of the State Set
 583	   introduced in Section 4.5).
 584	
 585	   This document doesn't specify how the addresses should be selected,
 586	   apart from the fact any selected address should not be the "busy
 587	   address list".
 588	
 589	   Some discussions and references about address selection (including
 590	   IPv4 and IPv6 stateless address autoconfiguration) can be found, for
 591	   instance, in the document [7].
 592	
 593	4.3  Duplicate Address Detection
 594	
 595	4.3.1  Overview
 596	
 597	   Duplicate Address Detection is performed passively, i.e., without
 598	   additional control messages.  Some various passive DAD techniques
 599	   were proposed in [8], we propose some others.
 600	
 601	   In this section, the detection algorithms are detailed.  Protocol
 602	   specifications are given in a later section.
 603	
 604	   In a MANET network with nodes running the OLSR, several different
 605	   scenarios of address conflicts may occur.  There are classified in
 606	   three separated cases:
 607	
 608	   Neighbor duplicate address detection: in this case, two neighbor
 609	      nodes (in range of each other) have selected the same address.
 610	
 611	
 612	
 613	
 614	
 615	Mase & Adjih            Expires November 27, 2005              [Page 11]
 616	
 617	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 618	
 619	
 620	   Two-hop duplicate address detection: in this case, two nodes which
 621	      have selected the same address are two-hop neighbors.  That is,
 622	      there is another node in the network which is the neighbor of
 623	      those both nodes.
 624	
 625	   Multihop duplicate address detection: in this case, the two nodes in
 626	      conflict are separated by two nodes or more.
 627	
 628	   The three cases of duplicate address are different in that they can
 629	   be detected by different methods: for instance the multihop duplicate
 630	   address detection requires the use of TC message information, while
 631	   the first two cases need not.
 632	
 633	   Also, an additional case is added: it's a specific multihop address
 634	   conflict case, where the address conflict results in deficiencies in
 635	   the MPR selection.
 636	
 637	4.3.2  Notation
 638	
 639	   In the Section 4.3, the following conventions are used to describe
 640	   the duplicate address conflict cases for the algorithms:
 641	
 642	   o  Capital letters are used to denote different nodes: such as "A",
 643	      "B", "C", etc...
 644	
 645	   o  Numbers are used to represent different addresses, such as "1",
 646	      "2", "3", etc...
 647	
 648	   o  The following notation is employed to represent the node "A" which
 649	      has the address "1": "A{1}".  In the event of an address conflict,
 650	      two nodes may be using the same address, such as "A{1}" and "B{1}"
 651	      for instance.
 652	
 653	   o  Each DAD rule is associated to a figure which graphically
 654	      represents the topology.  An example is given on Figure 1: one
 655	      node "A" with address "1".  In the figures which will follow, the
 656	      nodes which should apply the DAD rule, are highlighted by the mark
 657	      "**", like "A" is, on the sample figure.
 658	
 659	
 660	   +--------------+
 661	   | ** Node A{1} |
 662	   +--------------+
 663	
 664	                                 Figure 1
 665	
 666	
 667	
 668	
 669	
 670	
 671	Mase & Adjih            Expires November 27, 2005              [Page 12]
 672	
 673	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 674	
 675	
 676	4.3.3  Neighbor Duplicate Address Detection
 677	
 678	   In the case of "neighbor duplicate address", two conflicting nodes
 679	   are neighbors (see Figure 2).  This case is special since many
 680	   different non-OLSR methods could be used to detect the conflict:
 681	   because the neighbor nodes would receive messages from each other
 682	   directly, as they would, for instance, if they were connected on a
 683	   Ethernet network.  Thus, most of methods designed for (non-MANET) IP
 684	   networks, such as IPv4 autoconfiguration detection methods or IPv6
 685	   DAD, could be used.
 686	
 687	   Still, due to topology changes such methods could fail, or could not
 688	   be available in a node.  Hence a rule to detect conflicts at the OLSR
 689	   protocol level in this case is proposed.  At mininum, the two OLSR
 690	   nodes should at least periodically generate HELLO messages, hence the
 691	   following duplicate address detection rule is used:
 692	
 693	4.3.3.1  Rule R1
 694	
 695	   Rule: R1 (see Figure 2)
 696	
 697	   Context: An HELLO message is received by a node A{1}.
 698	
 699	   Check: Is the address {1}, the address of the originator node ?
 700	
 701	   Action: If it is the case, this node is in conflict and must select a
 702	      new address.
 703	
 704	   Rationale: A node doesn't receive its own HELLO messages (they are
 705	      not forwarded), hence the occurence of such an event means that a
 706	      node with the same address has sent an HELLO.
 707	
 708	
 709	   +--------------+       +--------------+
 710	   | ** Node A{1} | <---> | ** Node B{1} |
 711	   +--------------+       +--------------+
 712	
 713	                                 Figure 2
 714	
 715	   As mentioned, this rule can be completed by other duplicate address
 716	   detection mechanisms, not specified in this document, as they are
 717	   beyond its scope.
 718	
 719	   The detection R1 can be performed using HELLO messages (in any
 720	   autoconfiguration state, including HELLO_STATE).
 721	
 722	
 723	
 724	
 725	
 726	
 727	Mase & Adjih            Expires November 27, 2005              [Page 13]
 728	
 729	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 730	
 731	
 732	4.3.4  Two-hop duplicate address detection
 733	
 734	   In this case, the two conflicting nodes are two-hop neighbors, that
 735	   is: they are not neighbor, but they have a common neighbor (see
 736	   Figure 3).  The rule proposed here relies on the fact that a common
 737	   neighbor exists, and will receive the HELLO from both nodes.  The
 738	   detection proceeds in three steps: the common neighbor detects the
 739	   conflict using those HELLOs, then it advertises the conflict in some
 740	   message(s) (rule R2), and finally, the conflicting nodes change their
 741	   address upon receiving this conflict advertisement (rule R3).
 742	
 743	4.3.4.1  Rule R2
 744	
 745	   Rule: R2 (see Figure 3)
 746	
 747	   Context: In node B{2}: an HELLO message from address {1} was received
 748	      previously, and another HELLO from address {1} is just received by
 749	      B{2}.
 750	
 751	   Check: Are the sequence numbers of the HELLOs inconsistent (as
 752	      defined in Section 4.4)?
 753	
 754	   Action: If it is the case, there are two or more neighbors using the
 755	      same address {1}.  B{2} will advertise that the address {1} is
 756	      conflicting in its HELLO messages.
 757	
 758	   Rationale: If two neighbors of one node have conflicting addresses,
 759	      the HELLO sequence numbers will be inconsistent.
 760	
 761	
 762	   +--------------+       +--------------+       +--------------+
 763	   |  Node A{1}   | <---> | ** Node B{2} | <---> |  Node C{1}   |
 764	   +--------------+       +--------------+       +--------------+
 765	
 766	                                 Figure 3
 767	
 768	
 769	4.3.4.2  Rule R3
 770	
 771	   Rule: R3 (see Figure 4)
 772	
 773	   Context: In node A{1} (and node C{1}): a neighbor B{2} is advertising
 774	      that conflict exists with the address {1}.
 775	
 776	   Check: -
 777	
 778	
 779	
 780	
 781	
 782	
 783	Mase & Adjih            Expires November 27, 2005              [Page 14]
 784	
 785	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 786	
 787	
 788	   Action: If it is the case, A{1} is a conflicting node and must select
 789	      a new address.
 790	
 791	
 792	   +--------------+       +--------------+       +--------------+
 793	   | ** Node A{1} | <---> |  Node B{2}   | <---> | ** Node C{1} |
 794	   +--------------+       +--------------+       +--------------+
 795	
 796	                                 Figure 4
 797	
 798	   The detections R2 and R3 can be performed using HELLO messages (in
 799	   any autoconfiguration state, including HELLO_STATE).
 800	
 801	4.3.5  Multihop duplicate address detection
 802	
 803	   In this section, DAD rules are proposed to handle the case where the
 804	   distance between conflicting nodes is three hops or more.  In this
 805	   case, in general, it cannot be assumed that a single node has enough
 806	   information to detect the conflict using exclusively the HELLO
 807	   messages.  Hence, the logical choice is here to use information
 808	   inside TC messages.  However the duplicate address detection is
 809	   complicated by the optimizations of the OLSR routing protocol: first,
 810	   not all nodes originate TC messages ; second, TC messages might
 811	   include only a subset of neighbors ; third, OLSR messages may be
 812	   split and as a consequence, an individual TC message from one node
 813	   might not include all the topology information that the node should
 814	   periodically refresh.  Finally, the MPR selection algorithm can be
 815	   affected by duplicate addresses, and prevent proper operation of the
 816	   MPR flooding mechanism, hence prevent proper propagation of the TCs
 817	   used by DAD.
 818	
 819	   The DAD rules that are specified in the case of multihop DAD are
 820	   classified depending on the status of the conflicting nodes with
 821	   respect to TC generation: a node which generates TC messages (when it
 822	   is a multipoint relay of some node) is called a TC generator.  Three
 823	   cases are possible and are handled:
 824	
 825	   o  Both conflicting nodes are TC generators.
 826	
 827	   o  One of the conflicting nodes is a TC generator, and the other is
 828	      not.
 829	
 830	   o  None of the conflicting nodes is TC generator.
 831	
 832	   In each of the three cases, the DAD rules allow detection both on the
 833	   conflicting nodes (which would then change address) and on
 834	   intermediary nodes (which would then avoid routing table
 835	   contamination).  Finally some DAD rules are used for preventing the
 836	
 837	
 838	
 839	Mase & Adjih            Expires November 27, 2005              [Page 15]
 840	
 841	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 842	
 843	
 844	   following case:
 845	
 846	   o  Conflicting nodes are impeding MPR selection.
 847	
 848	   The following four sections handle individually each case.
 849	
 850	4.3.5.1  Multihop DAD with two TC generators
 851	
 852	   In this case, the two nodes in conflict are both TC generators.  Then
 853	   each of them would ultimately receive one TC with its own originator
 854	   address, but which it did not generate (for it was generated by the
 855	   other node).  The intermediate nodes would also detect conflict by
 856	   noticing discrepancy in the sequence numbers or discrepancy in the
 857	   content of the TC messages with same sequence number.
 858	
 859	   The first rule applies to conflicting nodes (R4 (Section 4.3.5.1.1)),
 860	   the second applies to other nodes in the network (R5
 861	   (Section 4.3.5.1.2)).
 862	
 863	4.3.5.1.1  Rule R4
 864	
 865	   Rule: R4 (see Figure 5)
 866	
 867	   Context: In node A{1} (or node C{1}): a TC with originator address
 868	      {1} has been received.  A{1} keeps track of the TC messages that
 869	      it has sent.
 870	
 871	   Check: Verify whether A has actually sent that TC: the message
 872	      sequence number should be the same as one message that A has sent
 873	      in the past, and then the content should be the same.
 874	
 875	   Action: If it is not the case, A{1} is a conflicting node and must
 876	      select a new address.
 877	
 878	
 879	   +--------------+          +--------------+          +--------------+
 880	   | ** Node A{1} | <- .. -> |  Node B{2}   | <- .. -> | ** Node C{1} |
 881	   | TC generator |          |              |          | TC generator |
 882	   +--------------+          +--------------+          +--------------+
 883	
 884	                                 Figure 5
 885	
 886	
 887	4.3.5.1.2  Rule R5
 888	
 889	
 890	
 891	
 892	
 893	
 894	
 895	Mase & Adjih            Expires November 27, 2005              [Page 16]
 896	
 897	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 898	
 899	
 900	   Rule: R5 (see Figure 6)
 901	
 902	   Context: In node B{2}: an TC message with originator address {1} was
 903	      received previously by the node, and another TC with originator
 904	      address {1} is just received by B{2}
 905	
 906	   Check: Are the sequence numbers of the TC messages consistent (as
 907	      defined in Section 4.4)?  Is the content of the TC identical to
 908	      the one(s) received before?
 909	
 910	   Action: If it not is the case, there are two or more nodes using the
 911	      same address {1}: then the TC should be forwarded (if it is has
 912	      not already been), but the content of the TC will be ignored and
 913	      not processed
 914	
 915	   Rationale: This detects a conflict between TC generators.  If the
 916	      conflicting nodes are sending TC messages with same sequence
 917	      number, standard MPR flooding might not allow the TC messages to
 918	      reach the other node.  Hence in case of conflict, the TC should be
 919	      forwarded by default.  Also, because a conflict has been detected,
 920	      the received TC is guaranted to hold information which is
 921	      inconsistent with the information already processed because it was
 922	      issued by a different node ; and hence, the content of TC message
 923	      should be ignored.
 924	
 925	
 926	   +--------------+          +--------------+          +--------------+
 927	   |  Node A{1}   | <- .. -> | ** Node B{2} | <- .. -> |  Node C{1}   |
 928	   | TC generator |          |              |          | TC generator |
 929	   +--------------+          +--------------+          +--------------+
 930	
 931	                                 Figure 6
 932	
 933	
 934	4.3.5.2  Multihop DAD with two non-generators
 935	
 936	   In this section, DAD rules are given for the case where none of the
 937	   conflicting nodes is a TC generator.  In such a configuration, the
 938	   conflict is detected by means of by using the TC messages of the
 939	   multi-point relays of the nodes.  As one conflicting node selects
 940	   some MPR, these MPR will send TC messages indicating this selection:
 941	   when one of the TC messages reaches the other conflicting node, this
 942	   node will detect inconsistency by discovering that it did not,
 943	   actually, select the TC originator as MPR.
 944	
 945	   The DAD for intermediate nodes is, however more complex, because they
 946	   cannot rely on sequence numbers as in previous section
 947	   Section 4.3.5.1, nor they can rely on knowledge of the actual MPR
 948	
 949	
 950	
 951	Mase & Adjih            Expires November 27, 2005              [Page 17]
 952	
 953	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
 954	
 955	
 956	   selection of every node like the nodes in conflict.  Hence to detect
 957	   occurences of such conflicts, another mechanism is used: it is based
 958	   on the concept of familiar nodes.  A node (an IP address) is familiar
 959	   for another node, when the last one has had knowledge of existence of
 960	   the first one for sufficiently long (see Section 4.6).
 961	
 962	   The hypothesis made now is that most conflicts occur because of
 963	   network merges.  In such an address conflict, now, let's assume a
 964	   node from one network is now sending TC messages including the
 965	   address of one node (in conflict with this network) from another,
 966	   newly merged, network.  For instance, let us consider Figure 7, and
 967	   let us assume that A{1}, C{2}, and E{4} were previously part of one
 968	   network, while B{1} and D{3} (one of its MPRs) were part of another.
 969	   It is reasonable to assume that D{3} will become the neighbor of few
 970	   nodes of the first network, which it will advertise.  Hence, most
 971	   likely, the TC messages of D{3}, which advertise the conflicting node
 972	   B{1}, also include mostly addresses of nodes from the merged network,
 973	   which would be unfamiliar nodes for A{1}.  Thence the DAD rule:
 974	   ignore the information relative to familiar nodes, when it is inside
 975	   TC messages from unfamiliar nodes, which also include too many
 976	   unfamiliar nodes.
 977	
 978	   Another rule is added for neighbors of the node A{1}, such as C{2}:
 979	   because they have knowledge of the neighborhood of A{1}, they are
 980	   able to directly check if D{3} is a neighbor of A{1}.
 981	
 982	4.3.5.2.1  Rule R6
 983	
 984	   Rule: R6 (see Figure 7)
 985	
 986	   Context: In node A{1}: a TC message with originator address {3} has
 987	      been received.
 988	
 989	   Check: If this TC includes the address {1} of A, A checks whether it
 990	      had recently selected {3} as MPR.
 991	
 992	   Action: If it is not the case, A{1} is a conflicting node and must
 993	      select a new address.
 994	
 995	   Rationale: If A{1} has not selected {3} as MPR, then another node
 996	      with address {1} must have done so, hence there is an address
 997	      conflict.
 998	
 999	
1000	
1001	
1002	
1003	
1004	
1005	
1006	
1007	Mase & Adjih            Expires November 27, 2005              [Page 18]
1008	
1009	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1010	
1011	
1012	   +--------------+                                    +--------------+
1013	   | ** Node A{1} |                                    | ** Node B{1} |
1014	   |  (non-MPR)   |                                    |  (non-MPR)   |
1015	   +--------------+                                    +--------------+
1016	         ^                                                     ^
1017	         |                                                     |
1018	         V                                                     V
1019	   +--------------+          +--------------+          +--------------+
1020	   |  Node C{2}   | <- .. -> |  Node E{4}   | <- .. -> |  Node D{3}   |
1021	   | TC generator |          |              |          | TC generator |
1022	   +--------------+          +--------------+          +--------------+
1023	
1024	                                 Figure 7
1025	
1026	
1027	4.3.5.2.2  Rule R7
1028	
1029	   Rule: R7 (see Figure 8)
1030	
1031	   Context: In node E{4}: a TC message from originator {2}, which is
1032	      familiar for E,  had been received.  It included the familiar (for
1033	      E) address {1}.  Another TC, from originator {3}, an unfamiliar
1034	      node for E, is including the same familiar address {1}.
1035	
1036	   Check: In this TC, check how many addresses are from familiar nodes.
1037	      If too little addresses are familiar, then the TC is assumed to
1038	      include an address {1} which is conflicting.
1039	
1040	   Action: If conflict is assumed, then the information of the TC of {3}
1041	      about address {1} is ignored (the previous one from {3} will still
1042	      be used), but all other content is kept.
1043	
1044	   Rationale: This is an heuristic for detecting conflict.  Note that in
1045	      any case, a route to {1} can still be computed using the TC
1046	      message from {2}.  Note also that after some time, {3} and all the
1047	      nodes advertised by {3} will be familiar to E, ensuring that this
1048	      rule will no longer apply.
1049	
1050	
1051	
1052	
1053	
1054	
1055	
1056	
1057	
1058	
1059	
1060	
1061	
1062	
1063	Mase & Adjih            Expires November 27, 2005              [Page 19]
1064	
1065	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1066	
1067	
1068	   +--------------+                                    +--------------+
1069	   |  Node A{1}   |                                    |  Node B{1}   |
1070	   |  (non-MPR)   |                                    |  (non-MPR)   |
1071	   +--------------+                                    +--------------+
1072	         ^                                                     ^
1073	         |                                                     |
1074	         V                                                     V
1075	   +--------------+          +--------------+          +--------------+
1076	   |  Node C{2}   | <- .. -> | ** Node E{4} | <- .. -> |  Node D{3}   |
1077	   | TC generator |          |              |          | TC generator |
1078	   +--------------+          +--------------+          +--------------+
1079	
1080	                                 Figure 8
1081	
1082	
1083	4.3.5.2.3  Rule R8
1084	
1085	   Rule: R8 (see Figure 9)
1086	
1087	   Context: In node C{2}: a HELLO message from node {1} was previously
1088	      received, and a TC message from node {3} is now received.
1089	
1090	   Check: If the TC message from {3} includes {1} as MPR selector, the
1091	      HELLO from {1} should also have included {3} as symmetrical
1092	      neighbor (actually more: as MPR)
1093	
1094	   Action: If this not the case, then a conflict is assumed for address
1095	      {1}.  Then the information of the TC message of {3} about address
1096	      {1} is ignored (the previous one from {3} will still be used), but
1097	      all other content is kept.
1098	
1099	   Rationale: This is another heuristic for detecting conflict, for
1100	      every node which is neighbor of the conflicting nodes.
1101	
1102	
1103	   +--------------+                                    +--------------+
1104	   |  Node A{1}   |                                    |  Node B{1}   |
1105	   |  (non-MPR)   |                                    |  (non-MPR)   |
1106	   +--------------+                                    +--------------+
1107	         ^                                                     ^
1108	         |                                                     |
1109	         V                                                     V
1110	   +--------------+          +--------------+          +--------------+
1111	   | ** Node C{2} | <- .. -> |   Node E{4}  | <- .. -> |  Node D{3}   |
1112	   | A's neighbor |          |              |          | TC generator |
1113	   +--------------+          +--------------+          +--------------+
1114	
1115	                                 Figure 9
1116	
1117	
1118	
1119	Mase & Adjih            Expires November 27, 2005              [Page 20]
1120	
1121	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1122	
1123	
1124	4.3.5.3  Multihop DAD with one TC Generator and one Non-Generator
1125	
1126	   In case one of the nodes in conflict is a TC generator while the
1127	   other one is not, the conflict can be detected by as previously.  The
1128	   TC generator can conduct duplicate address detection by checking the
1129	   TC messages of the MPR of the other node using DAD rule R6
1130	   (Section 4.3.5.2.1).  The conflicting node that does not generate TC
1131	   messages, can detect conflict with DAD rule R4 (Section 4.3.5.1.1).
1132	
1133	   However for intermediary nodes, a new case is possible.  We still
1134	   assume most conflicts occur because of network merges.  Then it is
1135	   possible that for one network, one conflicting node is a TC generator
1136	   in the other network, while the other one is not.  Using the same
1137	   logic as previously, the TC message of that conflicting node would
1138	   include many unfamiliar nodes, hence one DAD rule is to reject such
1139	   TC.
1140	
1141	4.3.5.3.1  Rule R9
1142	
1143	   Rule: R9 (see Figure 10)
1144	
1145	   Context: In node E{4}: a TC from originator familiar node {2}
1146	      (familiar for E) had been received and it included the (familiar
1147	      for E) address {1}.  Another TC message, from originator {1}, is
1148	      received.
1149	
1150	   Check: In this TC, check how many addresses are from familiar nodes.
1151	      If too little addresses are familiar, then the TC is assumed to be
1152	      from an unfamiliar node from a merged network.
1153	
1154	   Action: If conflict is assumed, then the information of the TC is
1155	      ignored (the previous one from {2} will still be used).
1156	
1157	   Rationale: This is an heuristic for detecting conflict.  Note that in
1158	      any case, a route to {1} can still be computed using {2} and note
1159	      that in absence of conflict, anyway, after some time, all the
1160	      nodes advertised by {1} will be familiar to E, ensuring that this
1161	      rule will no longer apply.
1162	
1163	
1164	
1165	
1166	
1167	
1168	
1169	
1170	
1171	
1172	
1173	
1174	
1175	Mase & Adjih            Expires November 27, 2005              [Page 21]
1176	
1177	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1178	
1179	
1180	   +--------------+
1181	   |  Node A{1}   |
1182	   |  (non-MPR)   |
1183	   +--------------+
1184	         ^
1185	         |
1186	         V
1187	   +--------------+          +--------------+          +--------------+
1188	   |  Node C{2}   | <- .. -> | ** Node E{4} | <- .. -> |  Node B{1}   |
1189	   | TC generator |          |              |          | TC generator |
1190	   +--------------+          +--------------+          +--------------+
1191	
1192	                                 Figure 10
1193	
1194	   Additionally, still in the case of network merge, the nodes that are
1195	   on the border of the network merge can actually use some heuristics
1196	   for detecting conflicts.  Indeed, if a node, is from another
1197	   (merging) network, it is likely to have many unfamiliar nodes as
1198	   neighbors.  And those unfamiliar nodes will be present in the Hello
1199	   messages of the node.  Hence when a node detects that one of its
1200	   neighbors has too many other neighbors that are unfamiliar, it can
1201	   suspect the neighbor is from another network.  In case the node is a
1202	   TC generator, it will then mark the address of the node as
1203	   unfamiliar.
1204	
1205	4.3.5.3.2  Rule R10
1206	
1207	   Rule: R10 (see Figure 11)
1208	
1209	   Context: In node C{3}: a TC message is being generated, and it
1210	      includes neighbor {1}.
1211	
1212	   Check: \myitem{Check:} In the neighborhood of X{1} (which is obtained
1213	      from the Hello messages, in the two-hop tuple set) check how many
1214	      addresses are from familiar nodes.  If too little addresses are
1215	      familiar, then the neighbor is assumed to be an node from a merged
1216	      network.
1217	
1218	   Action: If too little address are familiar, the address {1} is
1219	      advertised as being "with too many unfamiliar neighbors".
1220	
1221	   Rationale: This is an heuristic to avoid routing table contamination.
1222	      Note that the address {1} is still advertised and can be used by
1223	      node A{1} to detect the conflict.
1224	
1225	
1226	
1227	
1228	
1229	
1230	
1231	Mase & Adjih            Expires November 27, 2005              [Page 22]
1232	
1233	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1234	
1235	
1236	                                                       +--------------+
1237	                                                       |  Node X{1}   |
1238	                                                       |              |
1239	                                                       +--------------+
1240	                                                              ^
1241	                                                              |
1242	                                                              V
1243	   +--------------+          +--------------+          +--------------+
1244	   |  Node A{1}   | <- .. -> |  Node B{2}   | <- .. -> | ** Node C{3} |
1245	   |              |          |              |          | TC generator |
1246	   +--------------+          +--------------+          +--------------+
1247	
1248	                                 Figure 11
1249	
1250	   The following rule uses the information transmitted by the previous
1251	   one:
1252	
1253	4.3.5.3.3  Rule R11
1254	
1255	   Rule: R11 (see Figure 12)
1256	
1257	   Context: In node B{2}: a TC message has been received from originator
1258	      {3} and it includes neighbor {1} marked as ``with too many
1259	      unfamiliar neighbors'', by rule R10 in node {3}.
1260	
1261	   Check: -
1262	
1263	   Action: The address {1} should be ignored in the processing of the TC
1264	      message.  But the other addresses may still be used, and the TC
1265	      should still be forwarded.%with std MPR flooding.
1266	
1267	   Rationale: This is an heuristic to avoid routing table contamination,
1268	      using information from rule R10.
1269	
1270	
1271	                                                       +--------------+
1272	                                                       |  Node X{1}   |
1273	                                                       |              |
1274	                                                       +--------------+
1275	                                                              ^
1276	                                                              |
1277	                                                              V
1278	   +--------------+          +--------------+          +--------------+
1279	   |  Node A{1}   | <- .. -> | ** Node B{2} | <- .. -> |  Node C{3}   |
1280	   |              |          |              |          | TC generator |
1281	   +--------------+          +--------------+          +--------------+
1282	
1283	                                 Figure 12
1284	
1285	
1286	
1287	Mase & Adjih            Expires November 27, 2005              [Page 23]
1288	
1289	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1290	
1291	
1292	4.3.5.4  Three-hop DAD, Specific Case
1293	
1294	   It has been noted that in some cases the MPR selection process can
1295	   fail because of duplicate addresses (see [8]).  As a result, the MPR
1296	   flooding mechanism may fail to deliver a message to the entire
1297	   network, and then the previous DAD rules may fail to detect the
1298	   duplicate address detection.  This situation is illustrated on
1299	   Figure 13.  A specific rule can be devised to prevent this situation
1300	   and allow proper MPR selection: on the figure, the node B{2} is able
1301	   to detect that there is an inconsistency in the neighborhood
1302	   advertised by {1} and {3}, which may possibly arise from {1} being a
1303	   duplicate address.  In this case, the MPR selection of B would be
1304	   deficient: so B can still preventively select {3} as MPR by itself.
1305	   That way, the messages from A{1} going through B will reach D{1}
1306	   (triggering one of the previous DAD rules).
1307	
1308	4.3.5.4.1  Rule R12
1309	
1310	   Rule: R12 (see Figure 13)
1311	
1312	   Context: In node B{2}: a HELLO from node {1} had been received, and
1313	      now an HELLO from node {3} is received.
1314	
1315	   Check: If the HELLO from {3} includes {1} as symmetrical neighbor,
1316	      the HELLO from {1} should also have included {3} as symmetrical
1317	      neighbor.
1318	
1319	   Action: If it is not the case, there is an inconsistency and the node
1320	      B should select {3} as MPR.
1321	
1322	   Rationale: Such inconsistencies should never happen in a static
1323	      network, unless there is a conflict.  Note also that due to
1324	      topology changes, they may do so even if there is no conflict.  In
1325	      that case, note that the only penalty is an temporary increase of
1326	      the number of MPR selected.  It is still an excellent heuristic
1327	      that will solve the MPR selection problem when the network is
1328	      static.
1329	
1330	
1331	
1332	
1333	
1334	
1335	
1336	
1337	
1338	
1339	
1340	
1341	
1342	
1343	Mase & Adjih            Expires November 27, 2005              [Page 24]
1344	
1345	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1346	
1347	
1348	   +--------------+       +--------------+
1349	   |  Node A{1}   |       |  Node D{1}   |
1350	   +--------------+       +--------------+
1351	         ^                        ^
1352	         |                        |
1353	         V                        V
1354	   +--------------+       +--------------+
1355	   | ** Node B{2} | <---> |  Node C{3}   |
1356	   +--------------+       +--------------+
1357	
1358	                                 Figure 13
1359	
1360	
1361	4.4  Sequence Number Consistency
1362	
1363	   In [8], the use of sequence numbers to verify consistency has been
1364	   used in some general cases.  Here, sequence number consistency is
1365	   checked for the OLSR protocol, and consist really of two cases: HELLO
1366	   sequence number consistency, and TC sequence number consistency.
1367	
1368	4.4.1  Minimum Wrap-Around Limit
1369	
1370	   In the OLSR protocol [3], it is implicitly assumed that the sequence
1371	   number of one node will wrap-around within an interval of time
1372	   greater than DUP_HOLD_TIME.  Hence this value is a good reference for
1373	   the minimum expected interval before a wrap-round the sequence number
1374	   of any node in the network, denoted MIN_WRAP_AROUND_INTERVAL.
1375	
1376	4.4.2  HELLO Sequence Number Consistency
1377	
1378	   In case of HELLO messages, it is assumed that they would be received
1379	   in the same order as they are transmitted (because they are not
1380	   forwarded).  In this case, a node observing the HELLO messages from a
1381	   neighbor will see that their sequence numbers are permanently
1382	   increasing.  Now if there are two neighbors B and C of one node A,
1383	   the node A will receive alternatively messages from B and C, because
1384	   each is transmitting indefinitly.  Hence A must receive a sequence of
1385	   packets from B, then some packets from C, then some packets from B,
1386	   and so on.  Let's assume that ultimately a sufficiently long sequence
1387	   is received without packet loss, and which then will be in this
1388	   order:
1389	
1390	   o  one packet B1 from B (possibly the last one of a sequence of
1391	      packets from B)
1392	
1393	   o  some packets from C
1394	
1395	
1396	
1397	
1398	
1399	Mase & Adjih            Expires November 27, 2005              [Page 25]
1400	
1401	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1402	
1403	
1404	   o  one packet B2 from B (possibly the first one of a sequence of
1405	      packets from B)
1406	
1407	   Now because there was no packet loss, the sequence number of the
1408	   packet B2 is the sequence number of the packet B1 plus 1.  As a
1409	   result, considering the sequence number of any packet from C:
1410	
1411	   o  If it is greater than the sequence number of B1, then: the
1412	      sequence number of the packet B2 will be less or equal to the
1413	      sequence number of the packets from C.
1414	
1415	   o  Otherwise it is equal to or less than the sequence number of B1.
1416	
1417	   In both events, A observes a decrease or a repetition of the sequence
1418	   numbers of B.
1419	
1420	   Hence, for HELLO messages, it is sufficient to check if the HELLO
1421	   received from one address is equal to, or less than, the sequence
1422	   number of the previous HELLO received from this address.
1423	
1424	   However, because a node may not be constantly a neighbor (and hence,
1425	   quite naturally, a large number of successive HELLO messages may not
1426	   be received), this condition should be checked only when there was no
1427	   wrap-around, hence when the interval between the previous HELLO
1428	   received and the last HELLO received from the same address is less
1429	   than MIN_WRAP_AROUND_INTERVAL.
1430	
1431	4.4.3  TC Sequence Number Consistency
1432	
1433	   Because TC messages are forwarded with the MPR flooding mechanism,
1434	   first, the same message may be received several time, secondly, the
1435	   packet order can be changed, especially with the use of jitter.
1436	   Hence the algorithm used previously for checking consistency of HELLO
1437	   messages (Section 4.4.2) can not be used as is.
1438	
1439	   Hence the following principles are used:
1440	
1441	   o  The sequence number and the receving time of the last TC message
1442	      for each originator is recorded.
1443	
1444	   o  Each time a TC message is received from a given originator, with a
1445	      given sequence number, the node checks whether if a TC message
1446	      with similar identification already was received.  If it was, it
1447	      checks that the previous content is identical to the current
1448	      content.
1449	
1450	   o  If the sequence number difference (in absolute value) between the
1451	      new TC and previous TC from the same originator is above a given
1452	
1453	
1454	
1455	Mase & Adjih            Expires November 27, 2005              [Page 26]
1456	
1457	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1458	
1459	
1460	      threshold MAX_TC_DIFF_SEQ_NUM, then duplicate address can be
1461	      suspected.  Such an event is possible, for instance if another
1462	      node sends many non-TC messages or cease to be TC generator for
1463	      some time ; thus an additional check is performed on the message
1464	      rate: an approximation of the message rate is computed as the
1465	      "sequence number difference divided by the reception time
1466	      difference".  If this message rate is greater than a threshold
1467	      MAX_MESSAGE_RATE, then the TC Sequence Number are deemed
1468	      inconsistent.
1469	
1470	   If precise adjustement is desired for the values of
1471	   MAX_TC_DIFF_SEQ_NUM, and MAX_MESSAGE_RATE (peak rate), it can be
1472	   observed that one of the worst case occurs when two nodes are in
1473	   conflict, and one is using the same sequence numbers of the other
1474	   with a delay a little greater than DUP_HOLD_TIME.
1475	
1476	4.5  Autoconfiguration State
1477	
1478	4.5.1  Introduction
1479	
1480	   Each node has an "autoconfiguration state".  This state is an
1481	   indicator of how long the node has been in the network.  The central
1482	   idea, is that each time a node selects a new address, it should enter
1483	   the network gradually, running a restrained version of the OLSR
1484	   protocol.  By this way, that the node can detect which addresses are
1485	   being used, checking for duplicates of its own address, while
1486	   avoiding to disrupt the routing tables of the other nodes, in the
1487	   event that its address is actually found to be in conflict.
1488	
1489	4.5.2  Functionning
1490	
1491	   There are exactly 3 autoconfiguration states, in each of which the
1492	   behavior of the node is:
1493	
1494	   HELLO_STATE: When a node newly assigns its own address, it enters the
1495	      HELLO_STATE, where it generates HELLO messages, but not topology
1496	      control (TC) messages.  It does not participate in MPR selection
1497	      nor MPR flooding, and does not participate in data packet
1498	      forwarding either.  It doesn't fill the topology set nor the
1499	      routing table.  When it detects that it has an address conflict
1500	      with other nodes based on received hello messages (rules R1 to R3,
1501	      and rule R12), it re-selects a new address based on the busy
1502	      address list.  When a pre-determined time has elapsed, in this
1503	      state, without detecting address conflict, the node enters the
1504	      topology state.
1505	
1506	
1507	
1508	
1509	
1510	
1511	Mase & Adjih            Expires November 27, 2005              [Page 27]
1512	
1513	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1514	
1515	
1516	   TOPOLOGY_STATE: In this state, a node generates HELLO messages, but
1517	      not TC messages.  It processes TC messages, and performs MPR
1518	      selection, but cannot be MPR itself and hence, does not forward TC
1519	      messages.  It fills the network topology set but not the routing
1520	      table, and does not participate in data packet forwarding.  When
1521	      it detects that it has an address conflict with another node
1522	      (based rules R1 to R12 applied to received messages), it re-
1523	      selects a new address (using the recommendations of Section 4.2)
1524	      and returns to the HELLO_STATE.  When a pre-determined time
1525	      elapses in the TOPOLOGY_STATE without detecting address conflict,
1526	      the node enters the NORMAL_STATE.
1527	
1528	   NORMAL_STATE: In this state, the node is running the "normal" OLSR
1529	      protocol, completed with the algorithms specified in this document
1530	      , and without message processing/generation restrictions
1531	      associated to the state.  More precisely, the node generates both
1532	      HELLO messages and TC messages as usual.  It processes TC messages
1533	      generated by other nodes and forwards them as usual based on MPR
1534	      flooding.  It fills the topology set, calculates routing tables
1535	      and participates in data forwarding.  Only nodes in the
1536	      NORMAL_STATE are selected as the intermediary nodes (forwarders)
1537	      in the routing table calculation.  When the node detects that it
1538	      has an address conflict with other nodes (according to one of the
1539	      rules R1 to R12), it re-selects a new address and enters the
1540	      HELLO_STATE.
1541	
1542	   The behavior in each state is summarized in the following table:
1543	
1544	   +----------------+----------------+----------------+----------------+
1545	   |      State     |  HELLO_ STATE  |    TOPOLOGY_   |  NORMAL_ STATE |
1546	   |                |                |      STATE     |                |
1547	   +----------------+----------------+----------------+----------------+
1548	   |  Selectable as |       no       |       no       |       yes      |
1549	   |       MPR      |                |                |                |
1550	   |                |                |                |                |
1551	   |  MPR selection |       no       |       yes      |       yes      |
1552	   |                |                |                |                |
1553	   |   TC message   |       no       |       no       |       yes      |
1554	   |   forwarding   |                |                |                |
1555	   |                |                |                |                |
1556	   |   TC message   |       no       |       yes      |       yes      |
1557	   |   processing   |                |                |                |
1558	   | (MPR flooding) |                |                |                |
1559	   |                |                |                |                |
1560	   |   TC message   |       no       |       no       |       yes      |
1561	   |   generation   |                |                |                |
1562	   |                |                |                |                |
1563	
1564	
1565	
1566	
1567	Mase & Adjih            Expires November 27, 2005              [Page 28]
1568	
1569	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1570	
1571	
1572	   |  Routing table |       no       |       no       |       yes      |
1573	   |      (and      |                |                |                |
1574	   |   forwarding)  |                |                |                |
1575	   |                |                |                |                |
1576	   |    DAD rules   |   R1, R2, R3,  |    R1 to R12   |    R1 to R12   |
1577	   |                |     and R12    |                |                |
1578	   |                |                |                |                |
1579	   | State duration |  HELLO_ STATE_ |    TOPOLOGY_   |     forever    |
1580	   | (if no address |    DURATION    |     STATE_     |                |
1581	   |     change)    |                |    DURATION    |                |
1582	   +----------------+----------------+----------------+----------------+
1583	
1584	
1585	
1586	4.6  Node Familiarity
1587	
1588	   The concept of "node familiarity" is introduced for use of some
1589	   heuristics in DAD rules.  The definition is the following: a node (or
1590	   more precisely, an IP address) is "familiar" for another node, when
1591	   the last one has had knowledge of existence of the first one for
1592	   sufficiently long.  An node which is not familiar is "unfamiliar".
1593	
1594	   In NOA-OLSR, a node (more precisely, an address) considered familiar
1595	   when the time elapsed since the first time that its address has
1596	   appeared in any OLSR message, is greater than a fixed time interval
1597	   NODE_FAMILIAR_TIME (see Section 6).
1598	
1599	
1600	
1601	
1602	
1603	
1604	
1605	
1606	
1607	
1608	
1609	
1610	
1611	
1612	
1613	
1614	
1615	
1616	
1617	
1618	
1619	
1620	
1621	
1622	
1623	Mase & Adjih            Expires November 27, 2005              [Page 29]
1624	
1625	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1626	
1627	
1628	5.  Autoconfiguration Specifications
1629	
1630	5.1  Overview
1631	
1632	   This section provide a low-level view of the changes and additions to
1633	   the standard OLSR, necessary to implement NOA-OLSR performing
1634	   duplicate address detection.  The high-level description of the
1635	   method, including algorithms, is in Section 4.
1636	
1637	5.2  Information Repository
1638	
1639	   Though the exchange of OLSR control messages, each node accumulates
1640	   information about the network.  This information is stored according
1641	   to the descriptions in section 4 of the OLSR specification [3],
1642	   modified accordingly to the changes proposed to this section.
1643	
1644	5.2.1  Autoconfiguration State
1645	
1646	   Each node has one "autoconfiguration state" (see Section 4.5), which
1647	   is one of HELLO_STATE, TOPOLOGY_STATE and NORMAL_STATE.
1648	
1649	5.2.2  State Information Base
1650	
1651	   The State Information Base is the State Set: a set of type which hold
1652	   some information relevant to autoconfiguration for each address.
1653	
1654	   For each address in the network, a 'State Tuple' (S_main_addr,
1655	   S_time, S_state, S_last_hello_time, S_last_hello_seq_num,
1656	   S_last_tc_time, S_last_tc_seq_num, S_conflict_time,
1657	   S_MPR_remember_time, S_MPR_forced_time, S_creation_time) is recorded.
1658	
1659	   A state tuple primarily records information about the
1660	   autoconfiguration state of the node, but also with a set of data
1661	   about these addresses, which are used to perform autoconfiguration.
1662	
1663	      S_main_addr: the address of the node
1664	
1665	      S_state: the autoconfiguration state of the address (see
1666	      Section 4.5)
1667	
1668	      S_time: the time after which the tuple should be deleted
1669	
1670	      S_last_hello_time, S_last_hello_seq_num: the last time an HELLO
1671	      has been received from this address, and the sequence number of
1672	      this last HELLO
1673	
1674	      S_last_tc_time, S_last_tc_seq_num: the last time an TC has been
1675	      received from this address (as originator), and the sequence
1676	
1677	
1678	
1679	Mase & Adjih            Expires November 27, 2005              [Page 30]
1680	
1681	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1682	
1683	
1684	      number of this last TC
1685	
1686	      S_conflict_time: the time until which the address is considered to
1687	      be in conflict
1688	
1689	      S_MPR_remember_time: the time after which the node forgets that
1690	      this address was selected as MPR by this node.
1691	
1692	      S_MPR_forced_time: the time during which this address must be
1693	      choosen as MPR
1694	
1695	      S_creation_time: the time at which the state tuple was created
1696	
1697	
1698	5.2.3  Duplicate Set
1699	
1700	   In the standard OLSR protocol, each node recorded a "Duplicate Tuple"
1701	   which includes the following fields (D_addr, D_seq_num,
1702	   D_retransmitted, D_iface_list, D_time) (see section 3.4 of the OLSR
1703	   specification [3] where they are documented).
1704	
1705	   In NOA-OLSR, the following field is added: D_content_id.
1706	   D_content_id is used to identify the content of the message which was
1707	   received, and is should be a sequence of bytes.  Use and requirement
1708	   of D_content_id are highlighted in the next section.
1709	
1710	5.2.3.1  Message Content Identifier
1711	
1712	   A message content identifier is used by NOA-OLSR to check whether the
1713	   content of a message is identical to one received previously.  In
1714	   standard OLSR functionning, the message sequence numbers are used for
1715	   this purpose ; however in NOA-OLSR, because of the possibility of
1716	   duplicate addresses, two messages with same originator address and
1717	   same sequence number can be different if they are originated from
1718	   conflicting nodes.  The message content identifier is used in this
1719	   context, to verify whether the message are actually identical.
1720	
1721	   Each implementation must have a method to generate message content
1722	   identifiers from a received message, and such a method is naturally
1723	   denoted "Message Content Identifier Generation Method".  It is
1724	   typically some kind of hash method, and it should met the following
1725	   requirements:
1726	
1727	      It must take in input the message content, and output one "message
1728	      content identifier" (whose exact implementation is left to
1729	      implementors).  The message content is defined as the sequence of
1730	      bytes of an OLSR message, excluding the message header (section
1731	      3.3.2 of the OLSR specification [3]).
1732	
1733	
1734	
1735	Mase & Adjih            Expires November 27, 2005              [Page 31]
1736	
1737	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1738	
1739	
1740	      It must consistently generate the same message content identifier,
1741	      when it is applied on the same message content.
1742	
1743	      It should generate different message content identifiers, for
1744	      different message contents, with a high probability (typically
1745	      larger than the probability of address collision of one node).
1746	
1747	   Two examples of methods which satisfy the requirements are the
1748	   following:
1749	
1750	      Copy method: the message content identifier is the sequence of
1751	      bytes which constitute the message content itself.
1752	
1753	      Hash method: the message content identifier is a sequence of bytes
1754	      obtained after applying a hash function on the sequence of bytes
1755	      of the message content.  For instance the MD5 Message-Digest
1756	      Algorithm [2], suitable at least for networks with less that one
1757	      billion of OLSR nodes.
1758	
1759	   Because the message content identifiers are not transmitted to other
1760	   nodes, different nodes can implement different generation methods
1761	   without compromising interoperability.
1762	
1763	5.2.4  Set and Unset Fields
1764	
1765	   Several of the newly introduced fields in the miscellanous tuple are
1766	   not necessarily initialized at the tuple set creation.  Such fields
1767	   are:
1768	
1769	      In state tuples, the fields: S_last_hello_time,
1770	      S_last_hello_seq_num, S_last_tc_time, S_last_tc_seq_num,
1771	      S_conflict_time, S_MPR_remember_time, S_MPR_forced_time
1772	
1773	      In duplicate tuples, the field D_content_id
1774	
1775	   After tuple creation, the node must be able to identify the fact that
1776	   the field has been already set or not.  How to do so is indeed an
1777	   implementation issue, but in the remaining it is assumed that a node
1778	   can verify whether a field "is set" which means that a value has been
1779	   affected to the field yet.  In the opposite case, the field "is not
1780	   set".
1781	
1782	5.3  Address Selection and Address Change
1783	
1784	5.3.1  Address Selection
1785	
1786	   A node can choose an address using any algorithm, as highlighted in
1787	   Section 4.2, subject to one constraint.  The only constraint is that
1788	
1789	
1790	
1791	Mase & Adjih            Expires November 27, 2005              [Page 32]
1792	
1793	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1794	
1795	
1796	   the address MUST NOT select any busy address, that is an address
1797	   which has recently been used in the network.
1798	
1799	   Precisely, a busy address is an address such that:
1800	
1801	   o  There exists a State Tuple in the State Set with:
1802	
1803	      *  S_main_addr == the given address ; and
1804	
1805	      *  S_time is not expired
1806	
1807	   Hence it is required that either the address selection algorithm
1808	   yields addresses which are different from any such addresses, or
1809	   alternatively, that the algorithm run until the last address it
1810	   generates is no longer busy.  In case the algorithm is unable to
1811	   generate a new address, the node may stop.
1812	
1813	5.3.2  Address Change
1814	
1815	   Upon detection of a conflict a node MUST change its address, by
1816	   selecting a new one as described in Section 5.3.1.
1817	
1818	   When a node sets a new address (for initialisation, or because it has
1819	   just changed its address because of a conflict), the node SHOULD
1820	   perform the following steps:
1821	
1822	      The node sets its autoconfiguration state to HELLO_STATE.
1823	
1824	      Any potential OLSR message waiting for transmission or forwarding
1825	      at the routing protocol level, should be either send with the new
1826	      proper address (originator), or should be discarded.
1827	
1828	      Each link tuple of the Link Set must be modified so that
1829	      L_local_iface_addr (which should be the previous address of the
1830	      node), is set to new address.
1831	
1832	      The MPR Selector Set is emptied.
1833	
1834	      The routing table is emptied.
1835	
1836	   Additionally, the autoconfiguration state evolves as follows:
1837	
1838	      Also each time a conflict is detected, the node selects a new
1839	      address and restarts from HELLO_STATE.
1840	
1841	      If the node has been in state HELLO_STATE without address conflict
1842	      for a duration greater than HELLO_STATE_DURATION, then:
1843	
1844	
1845	
1846	
1847	Mase & Adjih            Expires November 27, 2005              [Page 33]
1848	
1849	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1850	
1851	
1852	         The node sets its autoconfiguration state to TOPOLOGY_STATE
1853	
1854	         The node recomputes its MPR set
1855	
1856	      If the node has been in state TOPOLOGY_STATE without address
1857	      conflict for a duration greater than TOPOLOGY_STATE_DURATION,
1858	      then:
1859	
1860	         The node sets its autoconfiguration state to NORMAL_STATE
1861	
1862	         The node recomputes its MPR set
1863	
1864	         The node recalculates its routing table
1865	
1866	
1867	5.4  State Set Update
1868	
1869	   The State Set records information that the node gathered about all
1870	   the addresses which are known in the network.  It is updated by a
1871	   variety of means at different steps of the OLSR processing.
1872	
1873	5.4.1  Populating the State Set
1874	
1875	   One of the main informations that State Set records is whether an
1876	   address has already been seen in the network, and what was the
1877	   autoconfiguration state associated with that address.
1878	
1879	   Because all external addresses of the network come from OLSR messages
1880	   received, such messages are the source of information used to
1881	   populate the State Set. Because state tuples may be used quite early
1882	   in the processing, the node MUST satisfy the following requirements:
1883	
1884	   o  For any address which is to be used, the node must preliminary
1885	      update its state tuple with the proper associated
1886	      autoconfiguration state if it is know, or with the STATE_UNDEFINED
1887	      autoconfiguration state.
1888	
1889	   More precisely, in the basic functionning of the OLSR protocol, TC
1890	   and HELLO messages are exchanged and upon receiving such a message,
1891	   and:
1892	
1893	   o  The node should update the state tuple of Sender Interface Address
1894	      with STATE_UNDEFINED (as per Section 5.4.2).
1895	
1896	   o  The node should update the state tuple of the Originator Address
1897	      with STATE_UNDEFINED (as per Section 5.4.2).
1898	
1899	
1900	
1901	
1902	
1903	Mase & Adjih            Expires November 27, 2005              [Page 34]
1904	
1905	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1906	
1907	
1908	   o  Depending on the message type, it should perform the following
1909	      updates if it is one of the following:
1910	
1911	      *  HELLO_MESSAGE, HELLO_MESSAGE_WITH_STATE: update the state set
1912	         according to Section 5.6.2.1
1913	
1914	      *  TC_MESSAGE, TC_MESSAGE_WITH_STATE: update the state set
1915	         according to Section 5.6.5.1
1916	
1917	
1918	5.4.2  State Tuple Update
1919	
1920	   This section describes the steps taken for the action refered in
1921	   other sections as: updating the state tuple for a given address
1922	   "Address" with a given state "Autoconfiguration State".  The steps
1923	   are the following:
1924	
1925	   o  If there exists no state tuple where:
1926	
1927	         S_main_addr == given Address
1928	
1929	      then one is created and inserted in the tuple set with the
1930	      following values:
1931	
1932	      *  S_main_addr = given Address
1933	
1934	      *  S_creation_time = current time
1935	
1936	      *  S_state = STATE_UNDEFINED
1937	
1938	      *  S_MPR_remember_time is not set
1939	
1940	      *  S_MPR_forced_time is not set
1941	
1942	      *  S_conflict_time is not set
1943	
1944	      *  S_last_hello_time is not set
1945	
1946	      *  S_last_tc_time is not set
1947	
1948	   o  The state tuple (newly created or not) where
1949	
1950	         S_main_addr == given Address
1951	
1952	      is then modified as follows:
1953	
1954	         S_time = current time + NODE_STATE_HOLD_TIME
1955	
1956	
1957	
1958	
1959	Mase & Adjih            Expires November 27, 2005              [Page 35]
1960	
1961	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
1962	
1963	
1964	      After that, if the following condition is true:
1965	
1966	         the given Autoconfiguration State is different from
1967	         STATE_UNDEFINED, AND
1968	
1969	         S_state is different from the given Autoconfiguration State
1970	
1971	      Then a potential topology change is recorded and the state tuple
1972	      is modified as follows:
1973	
1974	      *  S_state = given Autoconfiguration state
1975	
1976	   A potential topology change implies that both the MPR set and the
1977	   routing table SHOULD be recomputed.
1978	
1979	5.4.3  Associated State Tuple Retrieval
1980	
1981	   In many cases, the steps related to autoconfiguration use the state
1982	   tuple associated to one address, that is: the state tuple such as
1983	   S_main_addr is equal to that address (it is necessarily unique).  If
1984	   such a state tuple exists, then this is the one which is used when
1985	   the "associated state tuple is retrieved".
1986	
1987	   However, although such a state tuple should exist, it may be the case
1988	   that such a state tuple has been deleted, because S_time has expired.
1989	   This is because the state set is kept relatively independent from
1990	   other processings and from other sets by design.  When this case
1991	   occurs when the "associated state tuple is retrieved", a new state
1992	   tuple is created using the method in Section 5.4.2 (using
1993	   STATE_UNDEFINED).
1994	
1995	5.4.4  State Tuple: HELLO information update
1996	
1997	   Each time the handling of a received HELLO message has been finished,
1998	   the state tuple of its originator, that is the state tuple where:
1999	
2000	      S_main_addr == Originator Address
2001	
2002	   will exist (as an application of the rules Section 5.4.1).  The node
2003	   should then update or ensure that it had been updated as follows:
2004	
2005	      S_last_hello_time    = current time
2006	
2007	      S_last_hello_seq_num = HELLO message sequence number
2008	
2009	
2010	
2011	
2012	
2013	
2014	
2015	Mase & Adjih            Expires November 27, 2005              [Page 36]
2016	
2017	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2018	
2019	
2020	5.4.5  State Tuple: TC information update
2021	
2022	   Each time the handling of a received TC message has been finished,
2023	   the state tuple of its originator, that is the state tuple where:
2024	
2025	      S_main_addr == Originator Address
2026	
2027	   will exist (as an application of the rules Section 5.4.1).  The node
2028	   should then update or ensure that it had been updated as follows:
2029	
2030	      S_last_tc_time    = current time
2031	
2032	      S_last_tc_seq_num = TC message sequence number
2033	
2034	
2035	5.4.6  State Tuple: MPR information update
2036	
2037	   Before recomputing its MPR set, as documented in section 8.3 of the
2038	   OLSR specification [3], a node MUST use the current list of MPR to
2039	   save the information that those nodes had been choosen as MPR in the
2040	   recent past.  This is used for DAD rule Section 4.3.5.2.1.
2041	
2042	   For each address in its MPR set, the associated state tuple is
2043	   retrieved (as per Section 5.4.3), and is modified as follows:
2044	
2045	   o  S_MPR_remember_time = current time + MAX_MPR_REMEMBER_TIME
2046	
2047	
2048	5.4.7  Familiarity
2049	
2050	   The concept of familiar addresses, which is described in Section 4.6,
2051	   is used by NOA-OLSR.  In the actual specification, the fact that a
2052	   given address is familiar or unfamiliar is determined from the state
2053	   set, as follows:
2054	
2055	   1.  If there exists a state tuple in the state set, such as:
2056	
2057	          S_main_addr = given address, AND
2058	
2059	          current time > S_creation_time + NODE_FAMILIAR_TIME
2060	
2061	       then: the address is familiar
2062	
2063	   2.  Otherwise, the address is unfamiliar.
2064	
2065	
2066	
2067	
2068	
2069	
2070	
2071	Mase & Adjih            Expires November 27, 2005              [Page 37]
2072	
2073	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2074	
2075	
2076	5.5  Changes in Message Processing
2077	
2078	5.5.1  Overview
2079	
2080	   This section gives a description of the changes in the processing of
2081	   standard OLSR messages, namely HELLO messages and TC messages.
2082	
2083	5.5.2  Packet Processing and Message Flooding
2084	
2085	   The packet processing algorithm, documented in section 3.4 of the
2086	   OLSR specification [3], has been changed.  For convenience, such
2087	   changes have been denoted "message pre-processing" and "message post-
2088	   processing".  Hence, an autoconfiguration pre-processing step and an
2089	   autoconfiguration post-processing step have been added to the message
2090	   processing of the standard OLSR.
2091	
2092	   Upon receiving a OLSR packet, a node MUST perform a number of tasks
2093	   for each encapsulated message, listed in section 3.4 of the OLSR
2094	   specification [3].  The steps which have been added or changed are
2095	   the following:
2096	
2097	   1  ...
2098	
2099	   1 bis {CHANGED:}Depending on whether or not the node has decided to
2100	      interoperate with standard OLSR nodes (see Section 8.2), the node
2101	      MUST check whether it must reject the message based on
2102	      requirements of Section 5.6.7.  It the message must be rejected,
2103	      the processing of the message stops here.
2104	
2105	   2  If the time to live of the message is less than or equal to '0'
2106	      (zero), the message MUST silently be dropped. {CHANGED:} Even if
2107	      the message was sent by the receiving node (i.e., the Originator
2108	      Address of the message is the main address of the receiving node),
2109	      the node MUST perform the autoconfiguration pre-processing given
2110	      indicated in Section 5.5.3.  This pre-processing will finish with
2111	      one of four statuses:
2112	
2113	      Address conflict detected The node MUST then stop the processing
2114	         of the packet and change its address according to the rules of
2115	         Section 5.3.2.
2116	
2117	      Interrupt message processing The node MUST then skip the
2118	         processing of the current message, and proceed to the
2119	         processing of the next message (if any) of the packet.
2120	
2121	
2122	
2123	
2124	
2125	
2126	
2127	Mase & Adjih            Expires November 27, 2005              [Page 38]
2128	
2129	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2130	
2131	
2132	      Retransmit message and interrupt message processing The node MUST
2133	         first perform a special retransmission of the message according
2134	         to the rules listed in Section 5.5.2.1, then skip the
2135	         processing of the current message, and proceed to the
2136	         processing of the next message (if any) of the packet.
2137	
2138	      Continue message processing The node MUST continue the processing
2139	         of the message.
2140	
2141	   3 ... 4 (same as in section 3.4 of the OLSR specification [3])
2142	
2143	   5  {CHANGED:} the message SHOULD be post-processed according the the
2144	      specifications of Section 5.5.4.
2145	
2146	
2147	5.5.2.1  Special Retransmission
2148	
2149	   A special retransmission method is used when it is assumed, that, in
2150	   presence of address conflict, the MPR flooding mechanism alone would
2151	   not necessarily guarantee the proper distribution of one message to
2152	   the entire network.  This retransmission can be performed as a result
2153	   of the message pre-processing steps, it includes creation of a new
2154	   duplicate tuple, followed by a retransmission of the message section
2155	   3.4.1 of the OLSR specification [3]:
2156	
2157	   1.  A new duplicate tuple is inserted in the duplicate set with the
2158	       special duplicate tuple creation documented in Section 5.5.2.2.
2159	
2160	   2.  The TTL of the message is reduced by one.
2161	
2162	   3.  The hop-count of the message is increased by one.
2163	
2164	   4.  The message is broadcast on all interfaces (Notice: the remaining
2165	       fields of the message header SHOULD be left unmodified.)
2166	
2167	
2168	5.5.2.2  Special Duplicate Tuple Creation
2169	
2170	   This document uses the duplicate set in additional ways differing
2171	   from the standard OLSR [3].  Indeed, the duplicate set is also used
2172	   for both messages generated by the node and for messages
2173	   retransmitted using the Special Retransmission (Section 5.5.2.1)
2174	   method.  Such use relies on the creation of a duplicate tuple in a
2175	   special way by one method, herehence called "Special Duplicate Tuple
2176	   Creation".  The duplicate tuple is created for a given message, and
2177	   refering to the fields of the message, it is created as follows:
2178	
2179	
2180	
2181	
2182	
2183	Mase & Adjih            Expires November 27, 2005              [Page 39]
2184	
2185	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2186	
2187	
2188	      D_addr          = Originator Address
2189	
2190	      D_seq_num       = Message Sequence Number
2191	
2192	      D_retransmitted = true
2193	
2194	      D_time          = current time + DUP_HOLD_TIME
2195	
2196	      D_iface_list contains all the interfaces of the node
2197	
2198	      D_content_id    = computed message content identifier
2199	      (Section 5.2.3.1)
2200	
2201	
2202	5.5.3  Autoconfiguration Message Pre-Processing
2203	
2204	   This section specifies the message pre-processing which MUST be
2205	   implemented.  Note that the message pre-processing uses the message
2206	   headers but doesn't interpret (parse) the message content ; instead
2207	   it considers the message content as a sequence of bytes.
2208	
2209	   The following steps MUST be followed:
2210	
2211	   1.  If the message is a HELLO_MESSAGE or HELLO_WITH_STATE_MESSAGE,
2212	       the node pre-processes the messages according to Section 5.5.3.1.
2213	
2214	   2.  Otherwise, if the message is a TC_MESSAGE or
2215	       TC_WITH_STATE_MESSAGE, the node pre-processes the messages
2216	       according to Section 5.5.3.2.
2217	
2218	   3.  Otherwise:
2219	
2220	       1.  If the message was sent by the receiving node (i.e., the
2221	           Originator Address of the message is the main address of the
2222	           receiving node) the message pre-processing finish with status
2223	           'Interrupt Message Processing'
2224	
2225	       2.  Otherwise, this pre-processing finishes with status 'Continue
2226	           Message Processing'.
2227	
2228	
2229	5.5.3.1  Hello Message Pre-Processing
2230	
2231	   The pre-processing of such messages MUST be performed as follows,
2232	   checking for the R1 (Section 4.3.3.1).
2233	
2234	   1.  If the Originator Address of the message is the main address of
2235	       the receiving node:
2236	
2237	
2238	
2239	Mase & Adjih            Expires November 27, 2005              [Page 40]
2240	
2241	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2242	
2243	
2244	       1.  there is a conflict and the pre-processing finishes with
2245	           status 'Address conflict detected' (in accordance to DAD rule
2246	           R1 (Section 4.3.3.1))
2247	
2248	   2.  Otherwise, the pre-processing finishes with status 'Continue
2249	       message processing'
2250	
2251	
2252	5.5.3.2  TC Message Pre-Processing
2253	
2254	   The pre-processing of such message MUST be performed checking for the
2255	   DAD rules R4 (Section 4.3.5.1.1) and R5 (Section 4.3.5.2.2) as
2256	   follows:
2257	
2258	5.5.3.2.1  Rule R4 check
2259	
2260	   o  If the following condition is true:
2261	
2262	         Originator Address == main address of the node
2263	
2264	   o  AND if there exists no tuple in the tuple set where:
2265	
2266	         D_addr    == Originator Address, AND
2267	
2268	         D_seq_num == Message Sequence Number
2269	
2270	         D_content_id == computed message content identifier
2271	
2272	   o  then, in accordance to rule R4 (Section 4.3.5.1.1), a conflict as
2273	      been detected and the pre-processing is finished with status
2274	      'Address conflict detected'.
2275	
2276	
2277	5.5.3.2.2  Rule R5 check
2278	
2279	   The DAD rule R5 requires checking two conditions, namely, consistency
2280	   of sequence numbers of TC messages, and consistency of message
2281	   content of TC messages.
2282	
2283	   The check for consistent sequence numbers is the following:
2284	
2285	   o  If the following condition is true:
2286	
2287	      *  Originator Address is different from main address of the node
2288	
2289	      AND such TC has never been seen, that is: there exists no tuple in
2290	      the duplicate set where:
2291	
2292	
2293	
2294	
2295	Mase & Adjih            Expires November 27, 2005              [Page 41]
2296	
2297	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2298	
2299	
2300	         D_addr    == Originator Address, AND
2301	
2302	         D_seq_num == Message Sequence Number
2303	
2304	      AND a TC sequence number inconsistency is detected using the rules
2305	      of Section 4.4.3, that is, precisely: there exists one tuple in
2306	      the state set where:
2307	
2308	         S_main_addr == Originator Address, AND
2309	
2310	         S_last_tc_time is set , AND
2311	
2312	         | Message Sequence Number - S_last_tc_seq_um | >
2313	         MAX_TC_DIFF_SEQ_NUM, (where |a| is the absolute value of 'a'),
2314	         AND
2315	
2316	         | Message Sequence Number - S_last_tc_seq_um | > (current time
2317	         - S_last_tc_time) * MAX_MESSAGE_RATE
2318	
2319	      then, in accordance to rule R5 (Section 4.3.5.1.2) a conflict has
2320	      been detected between two other nodes, and the pre-processing is
2321	      finished with status 'Retransmit message and interrupt message
2322	      processing'.
2323	
2324	   The check for consistent TC message content is the following:
2325	
2326	   o  If the following condition is true:
2327	
2328	      *  Originator Address is different from main address of the node
2329	
2330	      AND such TC has been seen, that is: there exists at least one
2331	      tuple in the duplicate set where:
2332	
2333	         D_addr    == Originator Address, AND
2334	
2335	         D_seq_num == Message Sequence Number
2336	
2337	      AND there exists no tuple in the duplicate set where:
2338	
2339	         D_addr       == Originator Address, AND
2340	
2341	         D_seq_num    == Message Sequence Number, AND
2342	
2343	         D_content_id == computed message content identifier (see
2344	         Section 5.2.3.1)
2345	
2346	      then, in accordance to rule R5 (Section 4.3.5.1.2) a conflict has
2347	      been detected between two other nodes, and the pre-processing is
2348	
2349	
2350	
2351	Mase & Adjih            Expires November 27, 2005              [Page 42]
2352	
2353	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2354	
2355	
2356	      finished with status 'Retransmit message and interrupt message
2357	      processing'.
2358	
2359	
2360	5.5.4  Autoconfiguration Message Post-Processing
2361	
2362	   The node MUST do the following post-processing, to ensure that any
2363	   forwared TC has an associated duplicate tuple with proper
2364	   D_content_id:
2365	
2366	   1.  If the message is a TC_MESSAGE or a TC_WITH_STATE_MESSAGE:
2367	
2368	       *  If there exists a duplicate tuple such that:
2369	
2370	             D_addr    == Originator Address, AND
2371	
2372	             D_seq_num == Message Sequence Number, AND
2373	
2374	             D_content_id is not set
2375	
2376	       *  Then:
2377	
2378	             The field D_content_id of this duplicate tuple is set to
2379	             the value of the computed message content identifier
2380	             (Section 5.2.3.1).
2381	
2382	   2.  Otherwise the post-processing stops.
2383	
2384	
2385	5.6  Changes in OLSR Message Processing
2386	
2387	   This section documents the changes to be applied in the general
2388	   processing of the OLSR protocol: OLSR message processing for HELLO
2389	   and TC messages.
2390	
2391	5.6.1  Changes in HELLO Message Format
2392	
2393	   A new kind of HELLO message is used: it includes now both the
2394	   autoconfiguration state of the node which generates the HELLO and the
2395	   autoconfiguration state of neighbor interface addresses.  The Message
2396	   Type of the message is HELLO_WITH_STATE_MESSAGE (see also
2397	   Section 5.6.7).
2398	
2399	   Although another general format might be used, it is choosen to keep
2400	   the format of a message HELLO_WITH_STATE is similar to a normal
2401	   HELLO, except for the following: the reserved field is split in two
2402	   and includes the state of the nodes (for the originator of the HELLO,
2403	   and the neighbor nodes), as shown on Figure 14.
2404	
2405	
2406	
2407	Mase & Adjih            Expires November 27, 2005              [Page 43]
2408	
2409	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2410	
2411	
2412	        0                   1                   2                   3
2413	        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
2414	       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2415	       |  Node State   | Neigh. State  |     Htime     |  Willingness  |
2416	       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2417	       |   Link Code   |   Reserved    |       Link Message Size       |
2418	       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2419	       |                  Neighbor Interface Address                   |
2420	       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2421	        ...
2422	
2423	                                 Figure 14
2424	
2425	   "Node State" is the autoconfiguration state of the node.  "Neighbor
2426	   State" ("Neigh.  State") is the autoconfiguration state of the
2427	   neighbors being advertised.
2428	
2429	   As a result, only neighbors which all have the same autoconfiguration
2430	   state can be sent in the same HELLO_WITH_STATE: this is not
2431	   restrictive in practice, because several different HELLO_WITH_STATE
2432	   can be generated at the same time (each with different neighbor
2433	   state).
2434	
2435	   The choice if which of HELLO or HELLO_WITH_STATE to use, is specified
2436	   in Section 5.6.7.
2437	
2438	5.6.2  Changes in HELLO Message Processing
2439	
2440	   The HELLO Message Processing modifies on the processing described in
2441	   section 7.1.1 of the OLSR specification [3], in section 8.2.1 of the
2442	   OLSR specification [3], and in section 8.4.1 of the OLSR
2443	   specification [3].
2444	
2445	   The changes in the HELLO Message Processing are related to the DAD
2446	   rules R2 (Section 4.3.4.1), R3 (Section 4.3.4.2), and R12
2447	   (Section 4.3.5.4.1).
2448	
2449	   The "Originator Address" of a HELLO message is the main address of
2450	   the node, which has emitted the message.  Likewise, the "Neighbor
2451	   State" MUST be computed from the Neighbor State field of the HELLO
2452	   message (see Section 5.6.1).
2453	
2454	   The application of the DAD rule R2 (Section 4.3.4.1) is done by
2455	   performing the following processing with the message originator
2456	   address:
2457	
2458	   1.  The state tuple relative to the Originator Address of the message
2459	       is updated (see Section 5.4.2) with autoconfiguration state equal
2460	
2461	
2462	
2463	Mase & Adjih            Expires November 27, 2005              [Page 44]
2464	
2465	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2466	
2467	
2468	       to the Neighbor State.
2469	
2470	   2.  If that associated state tuple verifies:
2471	
2472	       *  S_last_hello_seq_num is set, AND
2473	
2474	       *  current time - S_last_hello_time < MIN_WRAP_AROUND_INTERVAL,
2475	          AND
2476	
2477	       *  S_last_hello_seq_num is equal or greater to the Message
2478	          Sequence Number of the received HELLO
2479	
2480	       then the Originator is conflicting with another node, according
2481	       to rule R2 (Section 4.3.4.1), and as a consequence, the state
2482	       tuple MUST be updated as follow:
2483	
2484	       *  S_conflict_time = current time + CONFLICT_HOLD_TIME
2485	
2486	   The application of the DAD rule R3 (Section 4.3.4.2) is done by
2487	   checking whether the address of the node is advertised by the means
2488	   of Section 5.6.3 in the HELLO of another node, as follows:
2489	
2490	   1.  If inside the same HELLO message from another node, the address
2491	       of the node appears more than one time, then:
2492	
2493	          The node is in conflict and node MUST then stop the processing
2494	          of the packet and change its address according to the rules of
2495	          Section 5.3.2
2496	
2497	   The DAD rule @R12@ adds the following processing upon receiving a
2498	   HELLO message:
2499	
2500	   o  for each address (henceforth: 2-hop neighbor address), listed in
2501	      the HELLO message with Neighbor Type equal to SYM_NEIGH or
2502	      MPR_NEIGH:
2503	
2504	      1.  if the main address of the 2-hop neighbor address == main
2505	          address of the receiving node:
2506	
2507	             silently ignore the 2-hop address
2508	
2509	      2.  otherwise if there exists a associated neighbor tuple where:
2510	
2511	             N_neighbor_main_addr == 2-hop neighbor address, AND
2512	
2513	          additionally there exists no two hop neighbor tuple where:
2514	
2515	
2516	
2517	
2518	
2519	Mase & Adjih            Expires November 27, 2005              [Page 45]
2520	
2521	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2522	
2523	
2524	             N_neighbor_main_addr == 2-hop neighbor address, AND
2525	
2526	             N_2hop_addr == Originator address
2527	
2528	          then, a potential conflict is assumed and:
2529	
2530	          +  state tuple associated to the 2-hop neighbor address is
2531	             retrieved (see Section 5.4.3), and it is updated as
2532	             follows:
2533	
2534	          +  S_MPR_forced_time = current time + CONFLICT_HOLD_TIME
2535	
2536	   Additionally, the node would now process its own HELLO messages,
2537	   because one check has been removed in Section 5.5.2.  This should be
2538	   avoided, hence now prior to performing the HELLO processing of
2539	   section 7.1.1 of the OLSR specification [3], the node should check
2540	   that:
2541	
2542	      The Originator Address of HELLO message is not one of the main
2543	      address of node
2544	
2545	   and if it is not the case, the standard HELLO processing should be
2546	   skipped.
2547	
2548	5.6.2.1  State Set Update from HELLO
2549	
2550	   The "Originator Address" of a HELLO message is the main address of
2551	   the node, which has emitted the message, and is in the message header
2552	   of the message (section 3.3.2 of the OLSR specification [3]).  The
2553	   "Node State" and the "Neighbor State" are fields inside the HELLO
2554	   message and have been added for NOA-OLSR (see Section 5.6.1).  Upon
2555	   receiving a HELLO, and before any processing of the content (i.e.
2556	   before using any of the addresses), the node SHOULD update the state
2557	   set as follows:
2558	
2559	   1.  The state tuple associated to Originator Address must be updated
2560	       with the autoconfiguration state "Node State" (as per
2561	       Section 5.4.2)
2562	
2563	   2.  For each of the neighbor interface address received in the HELLO
2564	       message:
2565	
2566	       1.  The state tuple associated to neighbor interface address must
2567	           be updated with the autoconfiguration state "Neighbor State"
2568	
2569	
2570	
2571	
2572	
2573	
2574	
2575	Mase & Adjih            Expires November 27, 2005              [Page 46]
2576	
2577	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2578	
2579	
2580	5.6.3  Changes in HELLO Message Generation
2581	
2582	   The HELLO Message Generation is the one described in section 6.2 of
2583	   the OLSR specification [3], with modifications described in this
2584	   section.  There are two modifications.  The first one is the
2585	   application of the the DAD rule Section 4.3.4.2 and is related to
2586	   rule Section 4.3.4.1: the address of neighbors which have been
2587	   detected to be in conflict are advertised in the HELLO messages.
2588	   There are implicitly advertised by a specific means: they are
2589	   included twice in the HELLO message.  The second modification relates
2590	   to the specification of the autoconfiguration states in the messages.
2591	
2592	   The amendments of section 6.2 of the OLSR specification [3] are
2593	   hence:
2594	
2595	   o  The Node State field is set such that it corresponds to the node's
2596	      current autoconfiguration state.
2597	
2598	   o  The Neighbor State field is set such that it corresponds to the
2599	      autoconfiguration state of all addresses listed in the HELLO
2600	      messages.  Namely, for any Neighbor Interface Address which is
2601	      advertised, it MUST be advertised in an HELLO message such that:
2602	
2603	      *  the associated state tuple (Section 5.4.3) has a S_state
2604	         identical to the Neighbor State the message
2605	
2606	      As a consequence, one node will send at least many different HELLO
2607	      as there are different autoconfiguration states of neighbors.
2608	
2609	   o  The following rule is added: any neighbor conflicting address, as
2610	      identified by the fact that there is one state tuple where:
2611	
2612	         S_main_addr == address, AND
2613	
2614	         S_conflict_time > current time
2615	
2616	      and for which there exists one associated neighbor tuple where:
2617	
2618	         N_neighbor_main_addr == S_main_addr
2619	
2620	      this conflicting address MUST be cited at least once within the
2621	      predetemined refreshing period REFRESH_INTERVAL in the following
2622	      way: it must figure listed twice (or more) in the same link
2623	      message, with proper Neighbor Code, and with either proper Link
2624	      Code or LINK_UNSPEC.
2625	
2626	
2627	
2628	
2629	
2630	
2631	Mase & Adjih            Expires November 27, 2005              [Page 47]
2632	
2633	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2634	
2635	
2636	5.6.4  Changes in TC Message Format
2637	
2638	   A new kind of TC message is used: it includes now both the
2639	   autoconfiguration state of the node which generates the TC and the
2640	   autoconfiguration state of advertised addresses.  The Message Type of
2641	   the message is TC_WITH_STATE_MESSAGE.  A similar change to HELLO
2642	   messages (see Section 5.6.1) is performed: use of the reserved field
2643	   for storing an extra Node State and Neighbor State (each of them
2644	   within one byte)
2645	
2646	       0                   1                   2                   3
2647	       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
2648	      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2649	      |              ANSN             | Node State    | Neigh. State  |
2650	      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2651	      |               Advertised Neighbor Main Address                |
2652	      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2653	       ...
2654	
2655	                                 Figure 15
2656	
2657	   "Node State" is the autoconfiguration state of the node.  "Neighbor
2658	   State" ("Neigh.  State") is the autoconfiguration state of the
2659	   neighbors being advertised.
2660	
2661	   Note that only nodes in STATE_NORMAL are sending TCs, and only nodes
2662	   in STATE_TOPOLOGY or STATE_NORMAL are selecting MPR (as per
2663	   Section 4.5.2), hence the possible values in the "Node State" and
2664	   "Neighbor State" fields are limited.  Still, upon receiving a TC
2665	   message, the TC processing should not assume this property is
2666	   necessarily verified, for possible interoperability reasons.
2667	
2668	   Additionaly, requirements about which of TC or TC_WITH_STATE to use,
2669	   are specified in Section 5.6.7.
2670	
2671	5.6.5  Changes in TC Message Processing
2672	
2673	   The TC Message Processing specified in the section 9.5 of the OLSR
2674	   specification [3] is now verifying the DAD rules R6
2675	   (Section 4.3.5.2.1), R7 (Section 4.3.5.2.2), R8 (Section 4.3.5.2.3)
2676	   and R9 (Section 4.3.5.3.1), and additionally, is adapted in several
2677	   ways.  The following adaptions SHOULD be added:
2678	
2679	   o  The TC processing of section 9.5 of the OLSR specification [3] and
2680	      the additional TC processing in this section, is only performed
2681	      when the node is in TOPOLOGY_STATE or NORMAL_STATE.
2682	
2683	
2684	
2685	
2686	
2687	Mase & Adjih            Expires November 27, 2005              [Page 48]
2688	
2689	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2690	
2691	
2692	   o  The state set should be updated from the TC messages.
2693	
2694	   o  Some TC messages uncover an address conflict involving the
2695	      receiving node (rule R6 (Section 4.3.5.2.1)).
2696	
2697	   o  Some TC messages are to be ignored because they are estimated to
2698	      include invalid information (rules R9 (Section 4.3.5.3.1)).
2699	
2700	   o  Some information in the TC messages (some addresses) should be
2701	      ignored because it is estimated to be invalid (rules R5
2702	      (Section 4.3.5.1.2) and @R12@).
2703	
2704	   Each of these are described in the following sections.
2705	
2706	5.6.5.1  State Set Update from TC
2707	
2708	   The "Originator Address" of a TC message is the main address of the
2709	   node, which has emitted the message, and is in the message header of
2710	   the message (section 3.3.2 of the OLSR specification [3]).  The "Node
2711	   State" and the "Neighbor State" are fields inside the TC message and
2712	   have been added for NOA-OLSR (see Section 5.6.4).  Upon receiving a
2713	   TC, and before any processing of the content (i.e. before using any
2714	   of the addresses), the node SHOULD update the state set as follows:
2715	
2716	   1.  The state tuple associated to Originator Address must be updated
2717	       with the autoconfiguration state "Node State" (as per
2718	       Section 5.4.2)
2719	
2720	   2.  For each of the advertised neighbor main address received in the
2721	       TC message:
2722	
2723	       1.  The state tuple associated to advertised neighbor address
2724	           must be updated with the autoconfiguration state "Neighbor
2725	           State"
2726	
2727	
2728	5.6.5.2  Conflict detection based on TC message content
2729	
2730	   The rule R6 (Section 4.3.5.2.1) asserts that the node is in conflict,
2731	   if it receives a TC which advertises its address in an situation
2732	   where it shouldn't.  The pratical steps for completing this check are
2733	   the following:
2734	
2735	   o  If in the received TC message:
2736	
2737	      *  the advertised address includes the main address of the node,
2738	         AND
2739	
2740	
2741	
2742	
2743	Mase & Adjih            Expires November 27, 2005              [Page 49]
2744	
2745	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2746	
2747	
2748	      *  the originator address is not in the MPR set of the node, AND
2749	
2750	      *  the associated state tuple of the originator address is such
2751	         that at least one of the two following conditions is verified:
2752	
2753	         +  S_MPR_remember_time is not set, or else,
2754	
2755	         +  S_MPR_remember_time < current time
2756	
2757	   o  Then the node is in conflict:  it will then stop the processing of
2758	      the message and it MUST change its address according to the rules
2759	      of Section 5.3.2.
2760	
2761	
2762	5.6.5.3  Dismissed TC messages
2763	
2764	   The rule R9 (Section 4.3.5.3.1) require certain TC messages to be
2765	   dismissed because they are inconsistent with the collected
2766	   information, and would contaminate routing tables.  The familiarity
2767	   (see Section 4.6) is at the core of the verification of rule R9.
2768	
2769	   Before further processing a TC , the node MUST first checks whether
2770	   the originator address of the TC is familiar (as described
2771	   Section 5.4.7).  If and only if, it is the case, the following steps
2772	   determine whether the TC processing should be interrupted according
2773	   to rule R9:
2774	
2775	   1.  The number of familiar addresses Nf and the number of unfamiliar
2776	       addresses Nu is computed for TC
2777	
2778	   2.  If the ratio of familiar addresses is too low, that is precisely
2779	       if:
2780	
2781	          Nf &lt (Nf + Nu) * MIN_TC_FAMILIARITY_RATE
2782	
2783	       Then:
2784	
2785	       *  the TC message should be ignored
2786	
2787	
2788	5.6.5.4  Dismissed addresses in TC messages
2789	
2790	   Upon receiving a TC and prior to TC processing of each address
2791	   according to section 9.5 of the OLSR specification [3], the DAD rules
2792	   R7 (Section 4.3.5.2.2) and R8 (Section 4.3.5.2.3) require some
2793	   addresses to be ignored to prevent routing table contamination.
2794	
2795	   In application of the rule R7 (Section 4.3.5.2.2), the node SHOULD
2796	
2797	
2798	
2799	Mase & Adjih            Expires November 27, 2005              [Page 50]
2800	
2801	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2802	
2803	
2804	   ignore any advertised address in a TC message which verifies the
2805	   following conditions simultaneously:
2806	
2807	   o  The advertised address is not one interface address of the node,
2808	      AND
2809	
2810	   o  The Originator Address of the TC is familiar (as per
2811	      Section 5.4.7), AND
2812	
2813	   o  The advertised address is familiar (as per Section 5.4.7), AND
2814	
2815	   o  There exists no topology tuple where:
2816	
2817	      *  Either T_last_addr == advertised address
2818	
2819	      *  or T_dest_addr == advertised address
2820	
2821	   Additionaly, in application of the rule R8 (Section 4.3.5.2.3), the
2822	   node SHOULD ignore any advertised address in a TC message which
2823	   verifies the following conditions simultaneously:
2824	
2825	   o  There exists a neighbor tuple where:
2826	
2827	      *  N_neighbor_main_addr == advertised address, AND
2828	
2829	      *  N_status == SYM
2830	
2831	      and then,
2832	
2833	   o  There exists no two hop tuple where:
2834	
2835	      *  N_neighbor_main_addr == advertised address, AND
2836	
2837	      *  N_2hop_addr == Originator Address
2838	
2839	
2840	5.6.6  Changes in TC Message Generation
2841	
2842	   In order to build the topology information base, each node, which has
2843	   been selected as MPR, broadcasts Topology Control (TC) messages in
2844	   the OLSR protocol.  The following changes should be made in the TC
2845	   message generation of section 9.3 of the OLSR specification [3].
2846	
2847	   The conditions for actually generating TC messages, now additionally
2848	   take into account the autoconfiguration state (see Section 4.5.2):
2849	
2850	   o  A node SHOULD only generate messages when it is in STATE_NORMAL
2851	
2852	
2853	
2854	
2855	Mase & Adjih            Expires November 27, 2005              [Page 51]
2856	
2857	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2858	
2859	
2860	   The format of TC messages is different, and hence the TC message
2861	   generation should fill properly the extra information:
2862	
2863	   o  The Node State field is set such that it corresponds to the
2864	      current autoconfiguration state of the node.
2865	
2866	   o  The Neighbor State field is set such that it corresponds to the
2867	      autoconfiguration state of all addresses advertised in the TC
2868	      message.  Namely, for any address which is advertised, it MUST be
2869	      advertised in an TC message such that:
2870	
2871	      *  the associated state tuple (Section 5.4.3) has a S_state
2872	         identical to the Neighbor State of the message
2873	
2874	      As a consequence, one node will send at least as many different
2875	      TCs as there are different autoconfiguration states of advertised
2876	      addresses.
2877	
2878	   Finally, the node MUST keep track of the TCs it has sent, and this is
2879	   done by adding information in the duplicate set.  To do so, after the
2880	   generation of each TC message, the node records it by creating a
2881	   duplicate tuple.  However due to an address conflict, the node may
2882	   already have such a tuple for a received TC from a conflicting node,
2883	   hence the two steps update: first check whether there is such TC, and
2884	   second, if not, create the duplicate tuple.  This is done as follows,
2885	   before the TC message is actually sent:
2886	
2887	   1.  the message content identifier is computed (as per
2888	       Section 5.2.3.1)
2889	
2890	   2.  If there exists a duplicate tuple where:
2891	
2892	       *  D_addr == main address of node
2893	
2894	       *  D_seq_num == TC message sequence number (in message header)
2895	
2896	       Then the node is in conflict (as an application of rule R4
2897	       (Section 4.3.5.1.1)), and
2898	
2899	       *  it will then stop the processing of the message and it MUST
2900	          change its address according to the rules of Section 5.3.2
2901	
2902	   3.  Otherwise the node creates a duplicate tuple, accordingly to
2903	       Special Duplicate Tuple Creation (Section 5.5.2.2).
2904	
2905	
2906	
2907	
2908	
2909	
2910	
2911	Mase & Adjih            Expires November 27, 2005              [Page 52]
2912	
2913	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2914	
2915	
2916	5.6.7  Message Type for HELLO and TC Messages
2917	
2918	   New message types are introduced by NOA-OLSR, for use with the new
2919	   HELLO message format in Section 5.6.1, and the new TC message format
2920	   inSection 5.6.4.  Because these messages simply use "reserved"
2921	   (blank) fields in standard OLSR messages, it would be possible to use
2922	   the standard message types HELLO_MESSAGE and TC_MESSAGE.  However for
2923	   interoperability reasons, a node SHOULD NOT do so.  Instead it should
2924	   decide first whether it wants to interoperate with standard OLSR
2925	   implementations, or not interoperate.  See Section 8.2 for a
2926	   comprehensive discussion of interoperability with standard OLSR.
2927	
2928	   Depending on whether it chooses to interoperate with the standard
2929	   OLSR implementations the node, should originate messages as follows:
2930	
2931	   Interoperating with standard OLSR: The node MUST generate messages
2932	      with HELLO_MESSAGE type and TC_MESSAGE type when the fields "node
2933	      state" and the "neighbor state" of the message are both in state
2934	      NORMAL.  It MUST ignore all the messages with "node state" ==
2935	      NORMAL_STATE and message type HELLO_WITH_STATE_MESSAGE or
2936	      TC_WITH_STATE_MESSAGE.
2937	
2938	   Never interoperating with standard OLSR: The node MUST generate all
2939	      HELLO and TC messages with a message type of
2940	      HELLO_WITH_STATE_MESSAGE or TC_WITH_STATE_MESSAGE.  It MUST ignore
2941	      all the messages with message type HELLO_MESSAGE and TC_MESSAGE.
2942	
2943	
2944	5.7  Changes in MPR Computation
2945	
2946	   The MPR computation is changed as follows.  First, before any new MPR
2947	   computation, it must be kept track of the previous MPR set, as
2948	   indicated in Section 5.4.6.
2949	
2950	   During MPR computation, the node should avoid any node in a state
2951	   different from STATE_NORMAL (as Section 4.5.2 specifies).  After the
2952	   MPR computation has been achieved, yielding a new MPR set, this set
2953	   is completed with the MPR enforced by autoconfiguration rules (namely
2954	   rule R12 (Section 4.3.5.4.1)), as follows:
2955	
2956	   The node MUST add to its MPR set, the address S_main_addr of any
2957	   state tuple where:
2958	
2959	      S_main_addr is not already in the newly computed MPR list
2960	
2961	      S_MPR_forced_time > current time
2962	
2963	
2964	
2965	
2966	
2967	Mase & Adjih            Expires November 27, 2005              [Page 53]
2968	
2969	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
2970	
2971	
2972	      There exists a neighbor tuple in the neighbor set where:
2973	
2974	         N_neighbor_main_addr == S_main_addr
2975	
2976	         N_status == SYM
2977	
2978	
2979	5.8  Changes in Routing Table Calculation
2980	
2981	   Standard routing table calculation is described in section 10 of the
2982	   OLSR specification [3].  However with the introduction of the
2983	   autoconfiguration state, it should now be exclusively be performed
2984	   when the node is in NORMAL_STATE (see Section 4.5.2).
2985	
2986	   The computed routes should also only have forwarders which are in the
2987	   NORMAL_STATE, and hence the routing table computation algorithm
2988	   should be modified.  The property of using only forwarders in the
2989	   NORMAL_STATE can be expressed as ensuring that only route entries
2990	   where:
2991	
2992	      R_next_addr is associated to a state tuple (as retrieved by
2993	      Section 5.4.3) where S_state == NORMAL_STATE
2994	
2995	      OR ELSE: R_next_addr == R_dest_addr (i.e. this is a direct
2996	      neighbor)
2997	
2998	   This property can be ensured by:
2999	
3000	   o  in step 3 of the algorithm of section 10 of the OLSR specification
3001	      [3], using only 2-hop tuples where N_neighbor_main_addr is
3002	      associated to a state tuple (Section 5.4.3) with S_state ==
3003	      NORMAL_STATE
3004	
3005	   o  in "the second step 3", sub-step 3.1: using only topology tuples
3006	      where T_last_addr is associated to a state tuple (Section 5.4.3)
3007	      with S_state == NORMAL_STATE
3008	
3009	
3010	
3011	
3012	
3013	
3014	
3015	
3016	
3017	
3018	
3019	
3020	
3021	
3022	
3023	Mase & Adjih            Expires November 27, 2005              [Page 54]
3024	
3025	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
3026	
3027	
3028	6.  Proposed Values for Constants
3029	
3030	   The proposed values of the specification are documented here.  Many
3031	   of them are depend on the constants section 18 of the OLSR
3032	   specification [3].
3033	
3034	   HELLO_STATE_DURATION (= HELLO_INTERVAL)
3035	
3036	   TOPOLOGY_STATE_DURATION (= TC_INTERVAL)
3037	
3038	   MAX_MPR_REMEMBER_TIME (= 2 x NEIGHB_HOLD_TIME)
3039	
3040	   CONFLICT_HOLD_TIME (= NEIGHB_HOLD_TIME)
3041	
3042	   NODE_FAMILIAR_TIME
3043	
3044	   MIN_WRAP_AROUND_INTERVAL (= DUP_HOLD_TIME)
3045	
3046	   MIN_TC_FAMILIARITY_RATE (= 50%)
3047	
3048	   MAX_TC_DIFF_SEQ_NUM, MAX_MESSAGE_RATE
3049	
3050	   NODE_STATE_HOLD_TIME (= 10 x DUP_HOLD_TIME)
3051	
3052	      Codes for Autoconfiguration State (in messages)
3053	
3054	   o  NORMAL_STATE = 0
3055	
3056	   o  TOPOLOGY_STATE = 1
3057	
3058	   o  HELLO_STATE = 2
3059	
3060	   o  UNDEFINED_STATE = 3
3061	
3062	   In this section, several proposed values are dependent on OLSR
3063	   protocol values.  However, it is allowed in standard OLSR, to change
3064	   some parameters (which will result in changes of "validity time" of
3065	   some messages, for instance): then there is an ambiguity about which
3066	   parameters should be chosen: the parameters of the receiving node, or
3067	   the parameters of the sender node.  The values that are proposed here
3068	   can be used by default, and can be replaced by more appropriate
3069	   values where necessary.
3070	
3071	
3072	
3073	
3074	
3075	
3076	
3077	
3078	
3079	Mase & Adjih            Expires November 27, 2005              [Page 55]
3080	
3081	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
3082	
3083	
3084	7.  IANA Considerations
3085	
3086	   Two new types of control messages are defined in NOA-OLSR.  Because
3087	   this document is a draft, some values in the range reserved for
3088	   private/local use (see section 22 of the OLSR specification [3]) are
3089	   proposed:
3090	
3091	   HELLO_WITH_STATE_MESSAGE = 130
3092	
3093	   TC_WITH_STATE_MESSAGE = 131
3094	
3095	   Values in the range 5-127 might be allocated in the OLSR registry
3096	   using standards action, for these new messages.
3097	
3098	
3099	
3100	
3101	
3102	
3103	
3104	
3105	
3106	
3107	
3108	
3109	
3110	
3111	
3112	
3113	
3114	
3115	
3116	
3117	
3118	
3119	
3120	
3121	
3122	
3123	
3124	
3125	
3126	
3127	
3128	
3129	
3130	
3131	
3132	
3133	
3134	
3135	Mase & Adjih            Expires November 27, 2005              [Page 56]
3136	
3137	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
3138	
3139	
3140	8.  Limitations and interoperability considerations
3141	
3142	   There are several limitations associated with NOA-OLSR proposed in
3143	   this specification.  The most important of them is related to the
3144	   fact that the node is assumed to work exclusively in an environment
3145	   where all nodes have a single interface, but there exists some other
3146	   minor limitations which are explained in Section 8.1.  The other kind
3147	   of limitation is a direct consequence of the previous one: although
3148	   an implementation of NOA-OLSR will interoperate with most standard
3149	   OLSR implementations, some features of standard OLSR interact
3150	   negatively, and unconditional interoperability is not warranted.  The
3151	   conditions of interoperability are documented in Section 8.1.
3152	
3153	8.1  Limitations
3154	
3155	   The limitations of NOA-OLSR protocol are highlighted in this
3156	   document.  Some of the limitations will be addressed in future
3157	   versions of this document, some are intrinsic to the method, and may
3158	   be lifted by added requirements on the OLSR protocol.  In this
3159	   section, the analysis of these limitations is provided.
3160	
3161	   In this version of this draft, the first one, the duplicate detection
3162	   rules have been specified only the most common case, where the node
3163	   has a single interface participating in the MANET.  This rules can
3164	   naturally be extended to integrate multiple interfaces, but doing so
3165	   is not immediatly straightforward, and hence will be the subject of
3166	   further specification.  Meanwhile, an implementation of this
3167	   specification of NOA-OLSR cannot be expected to perform reliably with
3168	   several interfaces, and more precisely:
3169	
3170	   o  Some duplicate address conflicts will not be detected.
3171	
3172	   o  The assumptions of some rules are no longer verified.  For
3173	      instance, rule R1 assumes that a node will not receive the HELLO
3174	      messages that it generates.
3175	
3176	   o  The changes in OLSR processing will result, in some cases, in a
3177	      general state of the node (including the data of the miscellaneous
3178	      information repositories) which is inconsistent and otherwise
3179	      impossible in both the standard OLSR and NOA-OLSR.  This will
3180	      result in unpredictable behavior.
3181	
3182	   Another present restriction derives from the assumption that TC
3183	   messages will include only MPR selectors in rule R6.  The rule could
3184	   be approprietly relaxed, but for any implementation which doesn't, in
3185	   some cases, the node will not interoperate with nodes which are
3186	   advertising more than their MPR selector set.  Precisely, these are
3187	   nodes which include they auxiliary functionning of "Redundant
3188	
3189	
3190	
3191	Mase & Adjih            Expires November 27, 2005              [Page 57]
3192	
3193	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
3194	
3195	
3196	   Topology Information" in section 15 of the OLSR specification [3]
3197	   (with TC_REDUNDANCY different from 0, see section 15.1 of the OLSR
3198	   specification [3]).
3199	
3200	   Concerning the intrisic restrictions due to the DAD rules, the most
3201	   noticeable is the use of message sequence numbers to detect message
3202	   inconsistency (as Section 4.4).  This assumes, logically, that the
3203	   message sequence numbers will be linearily incremented, however this
3204	   is property of the standard OLSR is not stated as a "REQUIREMENT".
3205	   Practices such as computing a sequence number from the content of the
3206	   message, for instance, would defeat autoconfiguration mechanisms.
3207	
3208	   Finally, the necessary changes auxiliary functions of OLSR (such as
3209	   for options "Non-OLSR Interfaces", section 12 of the OLSR
3210	   specification [3]), are not addressed in this documente, and the
3211	   impact of NOA-OLSR on auxiliary functionning is not addressed for the
3212	   time being.
3213	
3214	8.2  Interoperability with Standard OLSR
3215	
3216	   A node implementing NOA-OLSR protocol relies on some assumptions
3217	   given in the previous Section 8.1, hence might not be able to
3218	   interoperate successfully with a MANET comprising given standard OLSR
3219	   implementations.
3220	
3221	   Two modes of operation are defined in Section 5.6.7:
3222	
3223	   o  a node that never interoperates with nodes running standard OLSR.
3224	
3225	   o  a node that always interoperates with nodes running the standard
3226	      OLSR protocol.
3227	
3228	   The discussion and logic behind interoperability is found in
3229	   Section 8.2.1, and the discussion and logic behind isolation is in
3230	   Section 8.2.2.
3231	
3232	8.2.1  Considerations for Interoperability with Standard OLSR
3233	
3234	   A sufficient condition for interoperability between two link state
3235	   routing protocols running on the same network, is that they both use
3236	   the same topology information and the same algorithm for route
3237	   calculation, and also if topology information exchange is not
3238	   disrupted.  This sufficient condition is verified for the standard
3239	   OLSR and NOA-OLSR, when it is implemented as documented here and in
3240	   Section 5.6.7.  Namely:
3241	
3242	   o  When a node is in the NORMAL_STATE, it will advertise all
3243	      information about addresses in NORMAL_STATE inside HELLO and TC
3244	
3245	
3246	
3247	Mase & Adjih            Expires November 27, 2005              [Page 58]
3248	
3249	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
3250	
3251	
3252	      messages which are compliant with standard OLSR.
3253	
3254	   o  When a node is not in the NORMAL_STATE, or alternatively when it
3255	      advertises information about addresses which are not in
3256	      NORMAL_STATE, it uses messages that the standard OLSR will not
3257	      process.
3258	
3259	   The sufficient conditions are satisfied because:
3260	
3261	   o  As the standard OLSR does, NOA-OLSR uses only nodes in the
3262	      NORMAL_STATE for computing routes as forwarders.
3263	
3264	   o  MPR flooding is not disrupted, because: nodes with NOA-OLSR which
3265	      are not in NORMAL_STATE are invisible to the standard OLSR.  As a
3266	      result:
3267	
3268	      *  MPR flooding from Sstandard OLSR nodes: standard OLSR nodes
3269	         will never attempt to select as MPR some nodes which are not in
3270	         NORMAL_STATE, hence no problem arises.
3271	
3272	      *  MPR flooding from nodes with NOA-OLSR: nodes implementing NOA-
3273	         OLSR, that are not in NORMAL_STATE, are not selected as MPR.
3274	
3275	   Because of some of the current restrictions of NOA-OLSR, it might be
3276	   the case that in some networks, one given implementation of modified
3277	   OLSR won't interoperate with one given standard OLSR implementation.
3278	   This issue is addressed in the next Section 8.2.2.
3279	
3280	8.2.2  Considerations for Isolation from Standard OLSR Nodes
3281	
3282	   It may be desired to isolate an implementation of NOA-OLSR from the
3283	   standard OLSR networks.  This is a perticuliar instance of the
3284	   related problem of separating of a OLSR, MANET or general network in
3285	   different administrative entities.
3286	
3287	   In the OLSR protocol, all links between OLSR interfaces are
3288	   discovered by means of neighbor sensing.  Then, isolating one node to
3289	   another node can be achieved by either of them ignoring the messages
3290	   of the other.  This results into an asymmetrical link, which will
3291	   neither be used for MPR selection, nor MPR flooding nor route
3292	   calculation, and in practice, in isolation of the nodes from each
3293	   other.
3294	
3295	   However doing so, requires generally an external mechanism to
3296	   exchange information sufficient for one node to determine whether it
3297	   want to be isolated from another.  In the case of NOA-OLSR, this
3298	   information is implicitly provided as follows:
3299	
3300	
3301	
3302	
3303	Mase & Adjih            Expires November 27, 2005              [Page 59]
3304	
3305	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
3306	
3307	
3308	   o  A node which doesn't wish to interoperate with standard OLSR,
3309	      should transmit all its HELLO and TC messages with message type
3310	      HELLO_WITH_STATE and TC_WITH_STATE
3311	
3312	   o  A node which wishes to interoperate with standard OLSR, should
3313	      transmit all its HELLO and TC messages, when in STATE_NORMAL, ,
3314	      with message type HELLO_MESSAGE and TC_MESSAGE
3315	
3316	   These rules must be respected, as enforced by Section 5.6.7.  Note
3317	   that as a consequence, a node which receives HELLO message from a
3318	   node in STATE_NORMAL (or from a standard OLSR node), can deduce which
3319	   kind of policy it enforce.
3320	
3321	
3322	
3323	
3324	
3325	
3326	
3327	
3328	
3329	
3330	
3331	
3332	
3333	
3334	
3335	
3336	
3337	
3338	
3339	
3340	
3341	
3342	
3343	
3344	
3345	
3346	
3347	
3348	
3349	
3350	
3351	
3352	
3353	
3354	
3355	
3356	
3357	
3358	
3359	Mase & Adjih            Expires November 27, 2005              [Page 60]
3360	
3361	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
3362	
3363	
3364	9.  Requirements notation
3365	
3366	   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
3367	   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
3368	   document are to be interpreted as described in [1].
3369	
3370	
3371	
3372	
3373	
3374	
3375	
3376	
3377	
3378	
3379	
3380	
3381	
3382	
3383	
3384	
3385	
3386	
3387	
3388	
3389	
3390	
3391	
3392	
3393	
3394	
3395	
3396	
3397	
3398	
3399	
3400	
3401	
3402	
3403	
3404	
3405	
3406	
3407	
3408	
3409	
3410	
3411	
3412	
3413	
3414	
3415	Mase & Adjih            Expires November 27, 2005              [Page 61]
3416	
3417	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
3418	
3419	
3420	10.  Security Considerations
3421	
3422	   As the standard OLSR does not specify any special security measure,
3423	   it makes a target for various attacks (see section 20 of the OLSR
3424	   specification [3]) ; NOA-OLSR is subject to the same attacks, but
3425	   also to other attacks: such as forging messages in order to
3426	   deliberatly trigger some DAD rules, hence forcing an address change,
3427	   or increasing OLSR control traffic.  However the conditions in which
3428	   such attacks can be sucessfully conducted are some conditions in
3429	   which more severe attacks can be conducted with the standard OLSR
3430	   protocol.  Hence, in practice, vulnerability of NOA-OLSR protocol
3431	   against deliberate attacks, is identical to the vulnerability of the
3432	   standard OLSR protocol.
3433	
3434	
3435	
3436	
3437	
3438	
3439	
3440	
3441	
3442	
3443	
3444	
3445	
3446	
3447	
3448	
3449	
3450	
3451	
3452	
3453	
3454	
3455	
3456	
3457	
3458	
3459	
3460	
3461	
3462	
3463	
3464	
3465	
3466	
3467	
3468	
3469	
3470	
3471	Mase & Adjih            Expires November 27, 2005              [Page 62]
3472	
3473	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
3474	
3475	
3476	11.  Acknowledgements
3477	
3478	   This work was funded by Strategic Information and Communications R&D
3479	   Promotion Programme (SCOPE), Ministry of Internal Affairs and
3480	   Communications, Japan.
3481	
3482	   The authors would also like to thank  Sota Yoshida, Masoto Goto,
3483	   Takashi Hasegawa for their valuable contributions to NOA-OLSR, along
3484	   wth Yasuhiro Owada, and many other students of Information and
3485	   Communication Network Laboratory for other various aspects for
3486	   developping and testing of this protocol.
3487	
3488	   (document generation date: Thu May 26 15:00:15 2005)
3489	
3490	
3491	
3492	
3493	
3494	
3495	
3496	
3497	
3498	
3499	
3500	
3501	
3502	
3503	
3504	
3505	
3506	
3507	
3508	
3509	
3510	
3511	
3512	
3513	
3514	
3515	
3516	
3517	
3518	
3519	
3520	
3521	
3522	
3523	
3524	
3525	
3526	
3527	Mase & Adjih            Expires November 27, 2005              [Page 63]
3528	
3529	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
3530	
3531	
3532	12.  References
3533	
3534	12.1  Normative References
3535	
3536	   [1]  Bradner, S., "Key words for use in RFCs to Indicate Requirement
3537	        Levels", BCP 14, RFC 2119, March 1997.
3538	
3539	12.2  Informative References
3540	
3541	   [2]  Rivest, R., "The MD5 Message-Digest Algorithm", RFC 1321,
3542	        April 1992.
3543	
3544	   [3]  Clausen, T. and P. Jacquet, "Optimized Link State Routing
3545	        Protocol (OLSR)", RFC 3626, October 2003.
3546	
3547	   [4]  Ogier, R., Templin, F., and M. Lewis, "Topology Dissemination
3548	        Based on Reverse-Path Forwarding (TBRPF)", RFC 3684,
3549	        February 2004.
3550	
3551	   [5]  Perkins, C., Belding-Royer, E., and S. Das, "Ad hoc On-Demand
3552	        Distance Vector (AODV) Routing", RFC 3561, July 2003.
3553	
3554	   [6]  Johnson, D., "The Dynamic Source Routing Protocol for Mobile Ad
3555	        Hoc Networks (DSR)", draft-ietf-manet-dsr-10 (work in progress),
3556	        July 2004.
3557	
3558	   [7]  Ruffino, S., Stupar, P., and T. Clausen, "Autoconfiguration in a
3559	        MANET: connectivity scenarios and technical issues",
3560	        draft-ruffino-manet-autoconf-scenarios-00 (work in progress),
3561	        October 2004.
3562	
3563	   [8]  Weniger, K., "Passive Duplicate Address Detection in Mobile Ad
3564	        hoc  Networks", March 2003.
3565	
3566	   [9]  Mase, K., "No Overhead IP Address Autoconfiguration for Mobile
3567	        Ad Hoc Networks with Proactive Routing", Work in progress.
3568	
3569	
3570	
3571	
3572	
3573	
3574	
3575	
3576	
3577	
3578	
3579	
3580	
3581	
3582	
3583	Mase & Adjih            Expires November 27, 2005              [Page 64]
3584	
3585	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
3586	
3587	
3588	Authors' Addresses
3589	
3590	   Pr. Kenichi Mase
3591	   Information and Communication Network Lab.,Niigata University
3592	   Niigata University
3593	   Niigata 950-2181,
3594	   Japan
3595	
3596	   Phone: +81 25 262 7446
3597	   Email: mase@ie.niigata-u.ac.jp
3598	   URI:   http://www.net.ie.niigata-u.ac.jp/
3599	
3600	
3601	   Cedric Adjih
3602	   Information and Communication Network Lab.,Niigata University
3603	   Niigata University
3604	   (Permanent address: INRIA Domaine de Voluceau,  Rocquencourt, France)
3605	   Niigata 950-2181,
3606	   Japan
3607	
3608	   Email: cedric@net.ie.niigata-u.ac.jp, cedric.adjih@inria.fr
3609	
3610	
3611	
3612	
3613	
3614	
3615	
3616	
3617	
3618	
3619	
3620	
3621	
3622	
3623	
3624	
3625	
3626	
3627	
3628	
3629	
3630	
3631	
3632	
3633	
3634	
3635	
3636	
3637	
3638	
3639	Mase & Adjih            Expires November 27, 2005              [Page 65]
3640	
3641	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
3642	
3643	
3644	Index
3645	
3646	   D
3647	      Duplicate Address Detection Rule
3648	         R1  13
3649	         R2  14
3650	         R3  14
3651	         R4  16
3652	         R5  16
3653	         R6  18
3654	         R7  19
3655	         R8  20
3656	         R9  21
3657	         R10  22
3658	         R11  23
3659	         R12  24
3660	
3661	   I
3662	      Index
3663	         Document structure  7
3664	
3665	   S
3666	      Specification
3667	         Busy Address  33
3668	
3669	   T
3670	      terminology
3671	         Address Conflict  9
3672	         Autoconfiguration State  9
3673	         Busy Address  9
3674	         Conflicting Address  9
3675	         Conflicting Message  9
3676	         Conflicting Node  9
3677	         DAD Rule  9
3678	         Duplicate Address Detection (DAD)  9
3679	         familiar address  9
3680	         familiar node  9
3681	         Message Content Identifier Generation Method  9
3682	         Message Content Identifier  9
3683	         NOA-OLSR  10
3684	         Routing Table Contamination Avoidance  10
3685	         Sequence Number Consistency  10
3686	         Standard OLSR  10
3687	         TC Generator  10
3688	         unfamiliar node  9
3689	
3690	
3691	
3692	
3693	
3694	
3695	Mase & Adjih            Expires November 27, 2005              [Page 66]
3696	
3697	Internet-Draft     No Overhead Autoconfiguration OLSR           May 2005
3698	
3699	
3700	Intellectual Property Statement
3701	
3702	   The IETF takes no position regarding the validity or scope of any
3703	   Intellectual Property Rights or other rights that might be claimed to
3704	   pertain to the implementation or use of the technology described in
3705	   this document or the extent to which any license under such rights
3706	   might or might not be available; nor does it represent that it has
3707	   made any independent effort to identify any such rights.  Information
3708	   on the procedures with respect to rights in RFC documents can be
3709	   found in BCP 78 and BCP 79.
3710	
3711	   Copies of IPR disclosures made to the IETF Secretariat and any
3712	   assurances of licenses to be made available, or the result of an
3713	   attempt made to obtain a general license or permission for the use of
3714	   such proprietary rights by implementers or users of this
3715	   specification can be obtained from the IETF on-line IPR repository at
3716	   http://www.ietf.org/ipr.
3717	
3718	   The IETF invites any interested party to bring to its attention any
3719	   copyrights, patents or patent applications, or other proprietary
3720	   rights that may cover technology that may be required to implement
3721	   this standard.  Please address the information to the IETF at
3722	   ietf-ipr@ietf.org.
3723	
3724	
3725	Disclaimer of Validity
3726	
3727	   This document and the information contained herein are provided on an
3728	   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
3729	   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET
3730	   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
3731	   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
3732	   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
3733	   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
3734	
3735	
3736	Copyright Statement
3737	
3738	   Copyright (C) The Internet Society (2005).  This document is subject
3739	   to the rights, licenses and restrictions contained in BCP 78, and
3740	   except as set forth therein, the authors retain all their rights.
3741	
3742	
3743	Acknowledgment
3744	
3745	   Funding for the RFC Editor function is currently provided by the
3746	   Internet Society.
3747	
3748	
3749	
3750	
3751	Mase & Adjih            Expires November 27, 2005              [Page 67]
3752	
